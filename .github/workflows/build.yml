name: Kernel build

on:
  workflow_call:
    inputs:
      compiler:
        type: string
        default: "gcc"
      arch:
        required: true
        type: string
      defconfig:
        required: true
        type: string
      checks:
        type: boolean
        default: false
      auto_from_range:
        type: boolean
        default: true
    outputs:
      fail:
        value: ${{ jobs.build.outputs.fail }}
      warn:
        value: ${{ jobs.build.outputs.warn }}

env:
  run_id: ${{ github.run_id }}

jobs:
  build:
    timeout-minutes: 7200
    runs-on: [self-hosted, repo-only, v2]
    continue-on-error: true

    env:
      GCC_VERSION: 15
      LLVM_VERSION: 19

    outputs:
      fail: ${{ steps.assert.outputs.fail }}
      warn: ${{ steps.assert.outputs.warn }}

    steps:
    - uses: analogdevicesinc/doctools/checkout@action

    - name: Get sources
      run: |
        file=$(echo "${{ github.workflow_ref }}" | cut -d'/' -f3- | cut -d'@' -f1)
        workflow_ref=$(awk '
          $0 ~ "uses:" && $0 ~ job".yml" {
            sub(/^[[:space:]]*uses:[[:space:]]*/, "", $0);
            print $0;
            exit
          }
        ' "$file")
        echo $workflow_ref

        org_repo="$(echo "$workflow_ref" | cut -d'/' -f1-2)"
        ref="$(echo "$workflow_ref" | cut -d'@' -f2)"

        get_file () {
          echo https://raw.githubusercontent.com/$org_repo/$ref/$1
          curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o $1 \
              https://raw.githubusercontent.com/$org_repo/$ref/$1
        }

        mkdir -p ci
        get_file ci/build.sh
        get_file ci/runner_env.sh
        get_file ci/symbols_depend.py
        get_file ci/touched_kconfig.awk

    - name: Prepare env
      run: |
        if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
          echo "CXX=gcc-$GCC_VERSION" >> $GITHUB_ENV
          echo "CID=gcc_$GCC_VERSION" >> $GITHUB_ENV
        elif [[ "${{ inputs.compiler }}" == "llvm" ]]; then
          echo "LLVM=-$LLVM_VERSION" >> $GITHUB_ENV
          echo "CID=llvm_$LLVM_VERSION" >> $GITHUB_ENV
        else
          echo "::error ::Compiler '${{ inputs.compiler }}' is not supported, valid are 'gcc' or 'llvm'."
          exit 1
        fi
        if [[ "${{ inputs.checks }}" == "true" ]]; then
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            echo "CHECKS_SPARCE=true" >> $GITHUB_ENV
            echo "CHECKS_GCC_FANALYZER=true" >> $GITHUB_ENV
            echo "CHECKS_SMATCH=true" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.compiler }}" == "llvm" ]]; then
            echo "CHECKS_CLANG_ANALYZER=true" >> $GITHUB_ENV
          fi
        fi

        if [[ "${{ inputs.arch }}" == "arm" ]]; then
          echo "CROSS_COMPILE=arm-suse-linux-gnueabi-" >> $GITHUB_ENV
        elif [[ "${{ inputs.arch }}" == "arm64" ]]; then
          echo "CROSS_COMPILE=aarch64-suse-linux-" >> $GITHUB_ENV
        fi
        echo "ARCH=${{ inputs.arch }}" >> $GITHUB_ENV
        echo "DEFCONFIG=${{ inputs.defconfig }}" >> $GITHUB_ENV
        echo "AUTO_FROM_RANGE=${{ inputs.auto_from_range }}" >> $GITHUB_ENV

    - name: Make defconfig
      run: |
        if [[ -f "arch/$ARCH/configs/$DEFCONFIG" ]] || \
           [[ "$DEFCONFIG" == "allnoconfig" ]]; then
          make $DEFCONFIG
        else
          make defconfig
        fi

    - name: Imply driver config
      if: ${{ env.AUTO_FROM_RANGE == 'true' }}
      run: |
        source ./ci/build.sh
        auto_set_kconfig

    - name: Apply cocci/bash and save defconfig
      run: |
        source ./ci/build.sh
        apply_prerun
        make savedefconfig

    - name: Compile devicetrees
      if: ${{ env.AUTO_FROM_RANGE == 'true' }}
      run: |
        source ./ci/build.sh
        compile_devicetree

    - name: Compile kernel
      run: |
        source ./ci/build.sh
        compile_kernel

    - name: Prepare dist
      run: |
        if [[ -d dist ]]; then
          rm -r dist
        fi
        mkdir -p dist/modules
        cp defconfig dist
        cp arch/$ARCH/boot/*Image dist
        find . -type f -name *.ko | \
          xargs -I % cp --parents % dist/modules

    - name: Assert state
      if: ${{ failure() }}
      run: |
        source ./ci/build.sh
        set_step_fail "assert_state"
        echo "fatal=true" >> "$GITHUB_ENV"

    - name: Assert compiled
      if: ${{ !cancelled() && env.fatal != 'true' && env.AUTO_FROM_RANGE == 'true' }}
      run: |
        source ./ci/build.sh
        assert_compiled

    - name: Sparse
      if: ${{ !cancelled() && env.fatal != 'true' && env.CHECKS_SPARCE == 'true' }}
      run: |
        source ./ci/build.sh
        compile_kernel_sparse

    - name: GCC fanalyzer
      if: ${{ !cancelled() && env.fatal != 'true' && env.CHECKS_GCC_FANALYZER == 'true' }}
      run: |
        source ./ci/build.sh
        compile_gcc_fanalyzer

    - name: Clang analyzer
      if: ${{ !cancelled() && env.fatal != 'true' && env.CHECKS_CLANG_ANALYZER == 'true' }}
      run: |
        source ./ci/build.sh
        compile_clang_analyzer

    - name: Smatch
      if: ${{ !cancelled() && env.fatal != 'true' && env.CHECKS_SMATCH == 'true' }}
      run: |
        source ./ci/build.sh
        compile_kernel_smatch

    - name: Store the distribution packages
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ env.DEFCONFIG }}-${{ env.CID }}-${{ env.ARCH }}
        path: dist

    - name: Export labels
      if: ${{ !cancelled() }}
      id: assert
      run: |
        source ./ci/runner_env.sh
        export_labels
