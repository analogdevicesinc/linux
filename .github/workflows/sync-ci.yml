name: CI synchronization

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string

jobs:
  mirror:
    runs-on: [self-hosted, v1]

    steps:
    - uses: analogdevicesinc/doctools/checkout@v1

    - name: increase-limits
      run: |
        git config http.postBuffer 157286400

    - name: update-mirror
      run: |
        git switch -d
        git remote prune origin
        git fetch origin ${{ inputs.branch }}:${{ inputs.branch }} -f
        git switch ${{ inputs.branch }}

        git fetch origin main --depth=1
        declare -a arr=(
          "ci"
          ".github/workflows"
          "arch/arm/configs/adi_ci_defconfig"
          "arch/arm64/configs/adi_ci_defconfig"
          "arch/x86/configs/adi_ci_defconfig"
        )
        for i in "${arr[@]}"
        do
          git rm -rf "$i" || true
          git checkout origin/main -- "$i"
        done
        commit=$(git rev-parse origin/main)
        git commit -m "deploy: $commit" -m "patch ci" -s
        echo "{{ inputs.branch }}=${{ inputs.branch }}" >> "$GITHUB_ENV"

    - name: push-ci
      env:
          WORKFLOW_SECRET: ${{ secrets.WORKFLOW_SECRET}}
      if: ${{ env.WORKFLOW_SECRET != '' }}
      run: |
        url_=$(git remote get-url origin)
        url="https://x-access-token:${{ secrets.WORKFLOW_SECRET }}@github.com/${{ github.repository }}.git"
        git remote set-url origin "$url"
        git push origin ${{ inputs.branch }}:${{ inputs.branch }} -f || true
        git remote set-url origin "$url_"

    - name: push-ci
      env:
          WORKFLOW_SECRET: ${{ secrets.WORKFLOW_SECRET}}
      if: ${{ env.WORKFLOW_SECRET == '' }}
      run: |
        git push origin ${{ inputs.branch }}:${{ inputs.branch }} -f

    - name: unset-limits
      run: |
        git config --unset http.postBuffer

    - name: clean-up
      if: github.event_name == 'schedule'
      run: |
        git gc --prune=now

    - name: log-cached-branches
      run: |
        git --no-pager branch | cut -c 3- | \
          while IFS= read -r b; do printf "$b: " ; git rev-list --count $b; done
