# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/iio/adc/adi,ad4692.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Analog Devices AD4692 MuxSAR Analog-to-Digital Converter

maintainers:
  - Radu Sabau  <radu.sabau@analog.com>

description: |
  The AD4692 family are compact, Easy Drive, 16-bit MUX SAR ADCs incorporating
  accumulators per-channel and a flexible channel sequencer to enable a
  diverse range of space-constrained precision measurement applications.

    https://www.analog.com/en/products/ad4692.html

properties:
  compatible:
    enum:
      - adi,ad4691
      - adi,ad4692
      - adi,ad4693
      - adi,ad4694

  reg:
    maxItems: 1

  spi-max-frequency:
    maximum: 1000000

  reset-gpios:
    maxItems: 1

  gpiomode0-gpios:
    maxItems: 1

  gpiomode1-gpios:
    maxItems: 1

  gpiomode2-gpios:
    maxItems: 1

  gpiomode3-gpios:
    maxItems: 1

  clocks:
    maxItems: 1

  clock-names:
    items:
      - const: ref_clk

  pwms:
    maxItems: 1

  pwm-names:
    items:
      - const: cnv

  interrupts:
    maxItems: 1

  interrupt-names:
    enum:
      - DRDY
      - ADCBUSY

  vref-supply: true
  vio-supply: true

  adi,spi-mode:
    description:
      Change the ADC Conversion Mode

      0 - CNV Clock Mode. Use CNV signal as the conversion oscillator, number
          of pulses matches the matches of samples retrieved by the master
          according to the sequencer configuration.
      1 - CNV Burst Mode. Use CNV signal in order to transmit one pulse to the
          ADC, then the Internal Oscillator is triggered by the rising edge of
          the pulse and Internal Oscillator acts the way CNV acts for CNV
          Clock Mode
      2 - Autonomous Mode. Set CONV_START bit in the CONV_START_REG in order
          to start a conversion where the internal osllator acts the way CNV
          acts in CNV Clock Mode. Clear CONV_START bit to stop the conversion.
      3 - SPI Burst Mode. Same as Autonomous Mode but CONV_START bit clears
          itself.
      4 - Manual Mode. Use CNV signal and between pulses a command code is
          transmitted and the result comes on the next transfer.
    $ref: /schemas/types.yaml#/definitions/uint32
    enum: [0, 1, 2, 3, 4]
    default: 0

required:
  - compatible
  - reset-gpios
  - gpiomode0-gpios
  - reg
  - clocks
  - clock-names
  - pwms
  - pwm-names
  - interrupts
  - interrupt-names
  - vref-supply
  - vio-supply
  - adi,spi-mode

additionalProperties: false

examples:
  - |
    #include <dt-bindings/interrupt-controller/irq.h>
    #include <dt-bindings/gpio/gpio.h>
    #include <dt-bindings/pwm/pwm.h>

    &spi0 {
      status = "okay";
      #address-cells = <1>;
      #size-cells = <0>;

      ad4692@0 {
        compatible = "adi,ad4692";
        reg = <0>;

        spi-max-frequency = <2000000>;
        vref-supply = <&vref>;
        vio-supply = <&vio>;

        reset-gpios = <&gpio0 87 GPIO_ACTIVE_LOW>;
        gpiomode0-gpios = <&gpio0 86 GPIO_ACTIVE_LOW>;

        clocks = <&ref_clk>;
        pwms = <&axi_pwm_gen 0 0>;
        pwm-names = "cnv";

        interrupt-parent = <&gpio0>;
        interrupts = <86 IRQ_TYPE_EDGE_FALLING>;
        interrupt-names = "ADCBUSY";

        adi,spi-mode = <4>;
      };
    };
...
