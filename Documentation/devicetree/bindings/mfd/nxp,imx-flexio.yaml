# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/mfd/nxp,imx-flexio.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: NXP iMX Flexible Input/Output (FlexIO)

description: |
  The FlexIO is a highly configurable module providing a wide range of functionality including
  Emulation of a variety of serial/parallel communication protocols
  Flexible 16-bit timers with support for a variety of trigger, reset, enable and disable conditions
  Programmable logic blocks allowing the implementation of digital logic functions on-chip and
  configurable interaction of internal and external modules
  Programmable state machine for offloading basic system control functions from CPU

properties:
  "#address-cells": true

  "#size-cells": true

  compatible:
    items:
      const: nxp,imx-flexio

  reg:
    maxItems: 1

  interrupts:
    maxItems: 1

  clocks:
    minItems: 1

  clock-names:
    items:
      const: ipg
    minItems: 1

patternProperties:
  "^flexio-i2c+$":
    # Child node
    type: object
    $ref: "../i2c/i2c-imx-flexio.yaml"
    description:
      FlexIO I2C mode. This child node should follow the bindings specified in
      Documentation/devicetree/bindings/i2c/i2c-imx-flexio.yaml.

required:
  - "#address-cells"
  - "#size-cells"
  - compatible
  - interrupts
  - clocks
  - clock-names

additionalProperties: false

examples:
  - |
    #include <dt-bindings/interrupt-controller/arm-gic.h>
    #include <dt-bindings/clock/imx8ulp-clock.h>

    flexio@29350000 {
      #address-cells = <1>;
      #size-cells = <1>;
      compatible = "nxp,imx-flexio";
      reg = <0x29350000 0x10000>;
      interrupts = <GIC_SPI 91 IRQ_TYPE_LEVEL_HIGH>;
      clocks = <&pcc3 IMX8ULP_CLK_FLEXIO1>, <&pcc3 IMX8ULP_CLK_FLEXIO1>;
      clock-names = "per", "ipg";

      i2c-master {
        #address-cells = <1>;
        #size-cells = <0>;
        compatible = "nxp,imx-flexio-i2c-master";
        clock-frequency = <100000>;
        sda = /bits/ 8 <0xa>;
        scl = /bits/ 8 <0xb>;
      };
    };
