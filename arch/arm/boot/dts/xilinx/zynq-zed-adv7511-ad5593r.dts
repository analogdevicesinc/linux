/dts-v1/;

#include "zynq-zed.dtsi"
#include "zynq-zed-adv7511.dtsi"

/*
 * USING:
 * https://github.com/analogdevicesinc/hdl/tree/master/projects/cftl_std/zed
 */

/*
 * I2C:
 * JB3 SCL, JB4 SDA
 */

/*
 * SPI:
 * spi0_csn      # "JA1"
 * spi0_mosi     # "JA2"
 * spi0_miso     # "JA3"
 * spi0_clk      # "JA4"
 * gpio_cftl[0]] # "JA9"        GPIO 54 + 32 + 0
 * gpio_cftl[1]] # "JA10"       GPIO 54 + 32 + 1
 */

#include <dt-bindings/input/input.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/interrupt-controller/irq.h>

#include <dt-bindings/iio/adi,ad5592r.h>

/ {

	vref: regulator-vref {
		compatible = "regulator-fixed";
		regulator-name = "vref-ad559x";
		regulator-min-microvolt = <3000000>;
		regulator-max-microvolt = <3000000>;
		regulator-always-on;
	};

	gpio_keys {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		interrupt-parent = <&gpio0>;
		autorepeat;

		s5 {
			label = "Left";
			linux,code = <KEY_LEFT>;
			interrupts = <93 IRQ_TYPE_EDGE_FALLING>;
		};

		s3 {
			label = "Right";
			linux,code = <KEY_RIGHT>;
			interrupts = <91 IRQ_TYPE_EDGE_FALLING>;
		};

		s4 {
			label = "Up";
			linux,code = <KEY_UP>;
			interrupts = <92 IRQ_TYPE_EDGE_FALLING>;
		};

		s2 {
			label = "Down";
			linux,code = <KEY_DOWN>;
			interrupts = <90 IRQ_TYPE_EDGE_FALLING>;
		};

		s1 {
			label = "KEY_ENTER";
			linux,code = <28>;
			interrupts = <89 IRQ_TYPE_EDGE_FALLING>;
		};

	};

	rotary {
			compatible = "rotary-encoder";
			gpios = <&gpio0 94 1>, <&gpio0 95 1>;
			linux,axis = <1>; /* ABS_Y */
			rotary-encoder,steps = <24>;
			rotary-encoder,steps-per-period = <2>;
			rotary-encoder,rollover;
	};

};

&i2c0 {
	status = "okay";
	clock-frequency = <400000>;

	ad5593r@10 {
		#size-cells = <0>;
		#address-cells = <1>;
		#gpio-cells = <2>;
		compatible = "adi,ad5593r";
		reg = <0x10>;
		gpio-controller;

		channel@0 {
			reg = <0>;
			adi,mode = <CH_MODE_DAC>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@1 {
			reg = <1>;
			adi,mode = <CH_MODE_ADC>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@2 {
			reg = <2>;
			adi,mode = <CH_MODE_DAC_AND_ADC>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@6 {
			reg = <6>;
			adi,mode = <CH_MODE_GPIO>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
	};
};

&spi0 {
	status = "okay";
	num-cs = <4>;
	is-decoded-cs = <0>;

	ad5592r@0 {
		#size-cells = <0>;
		#address-cells = <1>;
		#gpio-cells = <2>;
		compatible = "adi,ad5592r";
		reg = <0>;

		spi-max-frequency = <1000000>;
		spi-cpol;

		vref-supply = <&vref>; /* optional */
		reset-gpios = <&gpio0 86 0>;  /* optional */
		gpio-controller;

		channel@0 {
			reg = <0>;
			adi,mode = <CH_MODE_DAC>;
		};
		channel@1 {
			reg = <1>;
			adi,mode = <CH_MODE_ADC>;
		};
		channel@2 {
			reg = <2>;
			adi,mode = <CH_MODE_DAC_AND_ADC>;
		};
		channel@3 {
			reg = <3>;
			adi,mode = <CH_MODE_DAC_AND_ADC>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@4 {
			reg = <4>;
			adi,mode = <CH_MODE_UNUSED>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@5 {
			reg = <5>;
			adi,mode = <CH_MODE_GPIO>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@6 {
			reg = <6>;
			adi,mode = <CH_MODE_GPIO>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
		channel@7 {
			reg = <7>;
			adi,mode = <CH_MODE_GPIO>;
			adi,off-state = <CH_OFFSTATE_PULLDOWN>;
		};
	};
};
