/*!
 * \brief     Apollo ARM types headers
 *
 * \copyright copyright(c) 2018 analog devices, inc. all rights reserved.
 *            This software is proprietary to Analog Devices, Inc. and its
 *            licensor. By using this software you agree to the terms of the
 *            associated analog devices software license agreement.
 */

/*!
 * \addtogroup ADI_APOLLO_ARM
 * @{
 */
#ifndef __ADI_APOLLO_ARM_TYPES_H__
#define __ADI_APOLLO_ARM_TYPES_H__

/*============= I N C L U D E S ============*/
#include "adi_cms_api_common.h"
#include "adi_apollo_common.h"

/*============= D E F I N E S ==============*/

#define ADI_APOLLO_ARM_BOOT_STATUS_READ_RETRY_COUNT         (50U)
#define ADI_APOLLO_ROM_BOOT_STEP_EC_TRANSFER                (4U)
#define ADI_APOLLO_RAM_BOOT_STEP_WAIT_FOR_CONFIG            (0x1DU)
#define ADI_APOLLO_RAM_BOOT_STEP_DEVICE_CONFIG_CRC_CHECK    (0x1EU)
#define ADI_APOLLO_CPU_BOOT_DONE                            (0x2EU)
#define ADI_APOLLO_CPU_BOOT_MAILBOX_READY                   (0x34U)

#define ADI_SECURE_BOOT_STAGE_CHECK                         (0x7FU)
#define ADI_ENCR_SECURE_BOOT_STAGE_CHECK                    (0xFFU)

#define ADI_APOLLO_ARM_EC_TRANSFER_STATUS_READ_RETRY_COUNT  (50U)

#define ADI_APOLLO_CPU1_PM_START              MEM_CODE_MEMORY_B_0
#define ADI_APOLLO_CPU0_PM_START              MEM_CODE_MEMORY_A_6

#define ADI_APOLLO_FW_DEVICE_PROFILE_PTR      (0x21000414U)


/*!
 * \brief   Enumerates shared memory banks between program memory and data memory for arm core.
            Setting for the l1mem0_shared_bank_div_ctrl and l1mem1_shared_bank_div_ctrl registers.
 */
typedef enum {
    ADI_APOLLO_DIV_IRAM_352K_DRAM_352K = 0x00U,          /*!< Set program memory(IRAM) to 352KB and data memory(DRAM) to 352KB. */
    ADI_APOLLO_DIV_IRAM_288K_DRAM_416K = 0x01U,          /*!< Set program memory(IRAM) to 288KB and data memory(DRAM) to 416KB. */
    ADI_APOLLO_DIV_IRAM_320K_DRAM_384K = 0x02U,          /*!< Set program memory(IRAM) to 320KB and data memory(DRAM) to 384KB. */
    ADI_APOLLO_DIV_IRAM_384K_DRAM_320K = 0x03U,          /*!< Set program memory(IRAM) to 384KB and data memory(DRAM) to 320KB. */
    ADI_APOLLO_DIV_IRAM_416K_DRAM_288K = 0x04U           /*!< Set program memory(IRAM) to 416KB and data memory(DRAM) to 288KB. */
} adi_apollo_cpu_memory_bank_div_sel_e;

/*!
* \brief CPU firmware memory location select
*/
typedef enum {
    ADI_APOLLO_FW_CPU_0 = 0,                /*!< Select Apollo CPU 0 firmware memory location */
    ADI_APOLLO_FW_CPU_1 = 1,                /*!< Select Apollo CPU 1 firmware memory location */
    ADI_APOLLO_DEVICE_PROFILE = 2,          /*!< Select Apollo device profile memory location */
    ADI_APOLLO_WARM_BOOT = 3,               /*!< Select Apollo warm boot memory location */
} adi_apollo_cpu_memory_sel_e;


typedef enum
{
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_FDUC_A     = 0x01u,    /*< code: 0x01 interrupt source: FDUC_A */
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_CDUC_A0    = 0x02u,    /*< code: 0x02 interrupt source: CDUC_A0 */
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_CDUC_A1    = 0x04u,    /*< code: 0x04 interrupt source: CDUC_A1 */
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_FDUC_B     = 0x08u,    /*< code: 0x08 interrupt source: FDUC_B */
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_CDUC_B0    = 0x10u,    /*< code: 0x10 interrupt source: CDUC_B0 */
    ADI_APOLLO_FW_IRQ_OUT_SOURCE_CDUC_B1    = 0x20u,    /*< code: 0x20 interrupt source: CDUC_B1 */
} adi_apollo_fw_irq_out_source_e;

/*!
 * \brief FW load config Structure
 */
typedef struct adi_apollo_arm_binary_info
{
    uint8_t *binary_ptr;                            /*!< Binary pointer */
    int32_t binary_sz_bytes;                        /*!< Binary size in bytes */
    uint32_t cpu_start_addr;                        /*!< CPU memory location */
    uint8_t is_cont;                                /*!< Indication of first vs cont txn */
} adi_apollo_arm_binary_info_t;

typedef struct {
    int32_t    last_cmd;            /* FW error generated by last command execution */
    int32_t    system;              /* FW error generated by system code */
    int32_t    track_cal;           /* FW error generated by the tracking cals */
} adi_apollo_cpu_errors_t;

#endif /* __ADI_APOLLO_ARM_TYPES_H__ */
/*! @} */