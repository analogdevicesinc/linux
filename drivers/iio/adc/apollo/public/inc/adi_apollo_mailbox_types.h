/**
 * \file adi_apollo_mailbox_types.h
 *
 * \brief     Mailbox Block definition types
 *
 * \copyright copyright(c) 2021 analog devices, inc. all rights reserved.
 *            This software is proprietary to Analog Devices, Inc. and its
 *            licensor. By using this software you agree to the terms of the
 *            associated analog devices software license agreement.
 */

/*!
 * \addtogroup ADI_APOLLO_MAILBOX
 * @{
 */

#ifndef __ADI_APOLLO_MAILBOX_TYPES_H__
#define __ADI_APOLLO_MAILBOX_TYPES_H__

/* WARNING!! This file is autogenerated by build_mailbox.py. Do not edit here */

#include "adi_cms_api_common.h"
#include "adi_apollo_common.h"

#ifdef DOXYGEN_RUN
#define ADI_APOLLO_PACKED(s) s
#else
#include "adi_apollo_platform_pack.h"
#endif

/**
 * \brief mailbox command ID enumeration
 */
typedef enum adi_apollo_mailbox_cmd_id
{
    ADI_APOLLO_MAILBOX_PING                                     =  0u, /*!< Opcode  0: Ping the CPU. See \ref adi_apollo_mailbox_resp_ping,  \ref adi_apollo_mailbox_ping */
    ADI_APOLLO_MAILBOX_RUN_INIT                                 =  1u, /*!< Opcode  1: Run initial calibrations. See \ref adi_apollo_mailbox_resp_run_init,  \ref adi_apollo_mailbox_run_init */
    ADI_APOLLO_MAILBOX_RUN_INIT_GET_COMPLETION                  =  2u, /*!< Opcode  2: Get the completion status of initial calibrations. See \ref adi_apollo_mailbox_resp_run_init_get_completion,  \ref adi_apollo_mailbox_run_init_get_completion */
    ADI_APOLLO_MAILBOX_RUN_INIT_GET_DETAILED_STATUS             =  3u, /*!< Opcode  3: Get detailed status information on initial calibrations. See \ref adi_apollo_mailbox_resp_run_init_get_detailed_status,  \ref adi_apollo_mailbox_run_init_get_detailed_status */
    ADI_APOLLO_MAILBOX_RUN_INIT_ABORT                           =  4u, /*!< Opcode  4: Abort any in progress initial calibrations. See \ref adi_apollo_mailbox_resp_run_init_abort,  \ref adi_apollo_mailbox_run_init_abort */
    ADI_APOLLO_MAILBOX_SET_ENABLED_TRACKING_CALS                =  5u, /*!< Opcode  5: Set the set of enabled tracking cals. See \ref adi_apollo_mailbox_resp_set_enabled_tracking_cals,  \ref adi_apollo_mailbox_set_enabled_tracking_cals */
    ADI_APOLLO_MAILBOX_GET_ENABLED_TRACKING_CALS                =  6u, /*!< Opcode  6: Get the set of enabled tracking cals. See \ref adi_apollo_mailbox_resp_get_enabled_tracking_cals,  \ref adi_apollo_mailbox_get_enabled_tracking_cals */
    ADI_APOLLO_MAILBOX_GET_TRACKING_CAL_STATE                   =  7u, /*!< Opcode  7: Get detailed state information for all tracking cals. See \ref adi_apollo_mailbox_resp_get_tracking_cal_state,  \ref adi_apollo_mailbox_get_tracking_cal_state */
    ADI_APOLLO_MAILBOX_GET_CAL_STATUS                           =  8u, /*!< Opcode  8: Get calibration status information. See \ref adi_apollo_mailbox_resp_get_cal_status,  \ref adi_apollo_mailbox_get_cal_status */
    ADI_APOLLO_MAILBOX_GET_SYS_STATUS                           =  9u, /*!< Opcode  9: Get system status information. See \ref adi_apollo_mailbox_resp_get_sys_status,  \ref adi_apollo_mailbox_get_sys_status */
    ADI_APOLLO_MAILBOX_GET_DEVICE_TEMPERATURE                   = 12u, /*!< Opcode 12: Get device temperature information. See \ref adi_apollo_mailbox_resp_get_device_temperature,  \ref adi_apollo_mailbox_get_device_temperature */
    ADI_APOLLO_MAILBOX_GET_ENABLED_TEMP_SENSORS                 = 13u, /*!< Opcode 13: Get enabled temp sensors. See \ref adi_apollo_mailbox_resp_get_enabled_temp_sensors,  \ref adi_apollo_mailbox_get_enabled_temp_sensors */
    ADI_APOLLO_MAILBOX_SET_ENABLED_TEMP_SENSORS                 = 14u, /*!< Opcode 14: Set enabled temp sensors. See \ref adi_apollo_mailbox_resp_set_enabled_temp_sensors,  \ref adi_apollo_mailbox_set_enabled_temp_sensors */
    ADI_APOLLO_MAILBOX_UNLOCK_CONFIG                            = 17u, /*!< Opcode 17: Unlock the configuration for changing. See \ref adi_apollo_mailbox_resp_unlock_config,  \ref adi_apollo_mailbox_unlock_config */
    ADI_APOLLO_MAILBOX_SET_CONFIG                               = 18u, /*!< Opcode 18: Set system or calibration configuration. See \ref adi_apollo_mailbox_resp_set_config,  \ref adi_apollo_mailbox_set_config */
    ADI_APOLLO_MAILBOX_GET_CONFIG                               = 19u, /*!< Opcode 19: Get system or calibration configuration. See \ref adi_apollo_mailbox_resp_get_config,  \ref adi_apollo_mailbox_get_config */
    ADI_APOLLO_MAILBOX_SET_CTRL                                 = 20u, /*!< Opcode 20: Set system or calibration ctrl. See \ref adi_apollo_mailbox_resp_set_ctrl,  \ref adi_apollo_mailbox_set_ctrl */
    ADI_APOLLO_MAILBOX_ENTER_DEBUG_MODE                         = 21u, /*!< Opcode 21: Enter debug mode. See \ref adi_apollo_mailbox_resp_enter_debug_mode,  \ref adi_apollo_mailbox_enter_debug_mode */
    ADI_APOLLO_MAILBOX_DEBUG                                    = 22u, /*!< Opcode 22: Generic debug command. See \ref adi_apollo_mailbox_resp_debug,  \ref adi_apollo_mailbox_debug */
    ADI_APOLLO_MAILBOX_SET_LOG_FILTERS                          = 23u, /*!< Opcode 23: Set CPU log filters. See \ref adi_apollo_mailbox_resp_set_log_filters,  \ref adi_apollo_mailbox_set_log_filters */
    ADI_APOLLO_MAILBOX_RESUME_BKPT                              = 24u, /*!< Opcode 24: Resume task(s) suspended due to breakpoint. See \ref adi_apollo_mailbox_resp_resume_bkpt,  \ref adi_apollo_mailbox_resume_bkpt */
    ADI_APOLLO_MAILBOX_RUN_SERDES_EYE_SWEEP                     = 26u, /*!< Opcode 26: Run SERDES eye sweep. See \ref adi_apollo_mailbox_resp_run_serdes_eye_sweep,  \ref adi_apollo_mailbox_run_serdes_eye_sweep */
    ADI_APOLLO_MAILBOX_RUN_SERDES_VERT_EYE_SWEEP                = 29u, /*!< Opcode 29: Run SERDES vertical eye sweep. See \ref adi_apollo_mailbox_resp_run_serdes_vert_eye_sweep,  \ref adi_apollo_mailbox_run_serdes_vert_eye_sweep */
    ADI_APOLLO_MAILBOX_SET_GPIO                                 = 30u, /*!< Opcode 30: Set GPIO pin configuration. See \ref adi_apollo_mailbox_resp_set_gpio,  \ref adi_apollo_mailbox_set_gpio */
    ADI_APOLLO_MAILBOX_GET_GPIO                                 = 31u, /*!< Opcode 31: Get GPIO pin configuration. See \ref adi_apollo_mailbox_resp_get_gpio,  \ref adi_apollo_mailbox_get_gpio */
    ADI_APOLLO_MAILBOX_MBIAS_PRE_CLOCK_INIT                     = 32u, /*!< Opcode 32: MBIAS pre clock init. See \ref adi_apollo_mailbox_resp_mbias_pre_clock_init,  \ref adi_apollo_mailbox_mbias_pre_clock_init */
    ADI_APOLLO_MAILBOX_MBIAS_POST_CLOCK_INIT                    = 33u, /*!< Opcode 33: MBIAS post clock init. See \ref adi_apollo_mailbox_resp_mbias_post_clock_init,  \ref adi_apollo_mailbox_mbias_post_clock_init */
    ADI_APOLLO_MAILBOX_SYSCLK_CONFIGURATION                     = 34u, /*!< Opcode 34: sysclk configuration. See \ref adi_apollo_mailbox_resp_sysclk_configuration,  \ref adi_apollo_mailbox_sysclk_configuration */
    ADI_APOLLO_MAILBOX_SYSCLK_CONDITIONING                      = 35u, /*!< Opcode 35: sysclk conditioning. See \ref adi_apollo_mailbox_resp_sysclk_conditioning,  \ref adi_apollo_mailbox_sysclk_conditioning */
    ADI_APOLLO_MAILBOX_SYSCLK_SWITCH_TO_HSDIG                   = 36u, /*!< Opcode 36: sysclk switch from ring oscillator. See \ref adi_apollo_mailbox_resp_sysclk_switch_to_hsdig,  \ref adi_apollo_mailbox_sysclk_switch_to_hsdig */
    ADI_APOLLO_MAILBOX_MASTER_BIAS_SET_DAC_BIAS_MODE            = 37u, /*!< Opcode 37: Set DAC Bias. See \ref adi_apollo_mailbox_resp_master_bias_set_dac_bias_mode,  \ref adi_apollo_mailbox_master_bias_set_dac_bias_mode */
    ADI_APOLLO_MAILBOX_SYSCLK_SWITCH_TO_RINGOSC                 = 38u, /*!< Opcode 38: sysclk switch to ring oscillator. See \ref adi_apollo_mailbox_resp_sysclk_switch_to_ringosc,  \ref adi_apollo_mailbox_sysclk_switch_to_ringosc */
    ADI_APOLLO_MAILBOX_PGM_PLL                                  = 39u, /*!< Opcode 39: program pll. See \ref adi_apollo_mailbox_resp_pgm_pll,  \ref adi_apollo_mailbox_pgm_pll */
    ADI_APOLLO_MAILBOX_UPDATE_CAL_DATA_CRC                      = 40u, /*!< Opcode 40: Update CRC for all calibration data. See \ref adi_apollo_mailbox_resp_update_cal_data_crc,  \ref adi_apollo_mailbox_update_cal_data_crc */
    ADI_APOLLO_MAILBOX_GET_FW_VERSION                           = 41u, /*!< Opcode 41: Gets the firmware version information. See \ref adi_apollo_mailbox_resp_get_fw_version,  \ref adi_apollo_mailbox_get_fw_version */
    ADI_APOLLO_MAILBOX_REQUEST_CHALLENGE                        = 42u, /*!< Opcode 42: Request challenge. See \ref adi_apollo_mailbox_resp_request_challenge,  \ref adi_apollo_mailbox_request_challenge */
    ADI_APOLLO_MAILBOX_SET_CHALLENGE                            = 43u, /*!< Opcode 43: Set challenge. See \ref adi_apollo_mailbox_resp_set_challenge,  \ref adi_apollo_mailbox_set_challenge */
    ADI_APOLLO_MAILBOX_POWER_UP_JTX                             = 44u, /*!< Opcode 44: Power up JTx. See \ref adi_apollo_mailbox_resp_power_up_jtx,  \ref adi_apollo_mailbox_power_up_jtx */
    ADI_APOLLO_MAILBOX_MCS_BSYNC_SET_CONFIG                     = 45u, /*!< Opcode 45: Set configuration by user. See \ref adi_apollo_mailbox_resp_mcs_bsync_set_config,  \ref adi_apollo_mailbox_mcs_bsync_set_config */
    ADI_APOLLO_MAILBOX_MCS_BSYNC_GET_CONFIG                     = 46u, /*!< Opcode 46: Get configuration by user. See \ref adi_apollo_mailbox_resp_mcs_bsync_get_config,  \ref adi_apollo_mailbox_mcs_bsync_get_config */
    ADI_APOLLO_MAILBOX_MCS_BSYNC_GO                             = 47u, /*!< Opcode 47: Start the BSYNC synchornization process. See \ref adi_apollo_mailbox_resp_mcs_bsync_go,  \ref adi_apollo_mailbox_mcs_bsync_go */
    ADI_APOLLO_MAILBOX_GET_ADC_SLICE_MODES                      = 48u, /*!< Opcode 48: Gets the ADC slice modes. See \ref adi_apollo_mailbox_resp_get_adc_slice_modes,  \ref adi_apollo_mailbox_get_adc_slice_modes */
    ADI_APOLLO_MAILBOX_SET_ADC_SLICE_MODE_FAST_SWITCH_ACTION    = 49u  /*!< Opcode 49: Set the action of ADC slice mode fast switch. See \ref adi_apollo_mailbox_resp_set_adc_slice_mode_fast_switch_action,  \ref adi_apollo_mailbox_set_adc_slice_mode_fast_switch_action */
} adi_apollo_mailbox_cmd_id_e;

/*****************************************************************************
 * Enumerations
 *****************************************************************************/
typedef enum
{
    APOLLO_CPU_NO_ERROR                                          = 0x00, /*< code: 0x00 no error */
    APOLLO_CPU_ADC_RX_SCAL_OBJ_ERROR                             = 0x01, /*< code: 0x01 err: Slice cal-object, cause: calibration may have saturated, recovery: no recovery */
    APOLLO_CPU_ADC_RX_SCAL_INTERRUPT_STATUS_ERROR                = 0x02, /*< code: 0x02 err: Slice cal-IRQ status, cause: Unexpected HW behavior; interrupt status error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_SCAL_INTERRUPT_FG_ERROR                    = 0x03, /*< code: 0x03 err: Slice cal-interrupt foreground error, cause: Unexpected HW behavior; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_SCAL_INTERRUPT_BG_ERROR                    = 0x04, /*< code: 0x04 err: Slice cal-interrupt background error, cause: Unexpected HW behavior; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FCAL_OBJ_ERROR                             = 0x05, /*< code: 0x05 err: Front-End cal-object, cause: calibration may have saturated, recovery: no recovery */
    APOLLO_CPU_ADC_RX_FCAL_INTERRUPT_STATUS_ERROR                = 0x06, /*< code: 0x06 err: Front-End cal-IRQ status, cause: Unexpected HW behavior; interrupt status; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FCAL_INTERRUPT_FG_ERROR                    = 0x07, /*< code: 0x07 err: Front-End cal - interrupt foreground error, cause: Unexpected HW behavior; Front-end interrupt foreground; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FCAL_INTERRUPT_BG_ERROR                    = 0x08, /*< code: 0x08 err: Front-End cal - interrupt background error, cause: Unexpected HW behavior; Front-end interrupt background; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ICAL_OBJ_ERROR                             = 0x09, /*< code: 0x09 err: Interleaving cal-object, cause: calibration may have saturated; report to ADI, recovery: no recovery */
    APOLLO_CPU_ADC_RX_ICAL_INTERRUPT_STATUS_ERROR                = 0x0a, /*< code: 0x0a err: Interleaving cal-IRQ status, cause: Unexpected HW behavior; interrupt status; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ICAL_INTERRUPT_FG_ERROR                    = 0x0b, /*< code: 0x0b err: Interleaving cal-interrupt foreground, cause: Unexpected HW behavior; interleaving interrupt foreground; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ICAL_INTERRUPT_BG_ERROR                    = 0x0c, /*< code: 0x0c err: Interleaving cal-interrupt background, cause: Unexpected HW behavior; interleaving interrupt background; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FTEST_OBJ_ERROR                            = 0x0d, /*< code: 0x0d err: Factory test cal-object, cause: Factory test cal object; report to ADI, recovery: no recovery */
    APOLLO_CPU_ADC_RX_FTEST_INTERRUPT_STATUS_ERROR               = 0x0e, /*< code: 0x0e err: Factory test cal-IRQ status, cause: Unexpected HW behavior; interrupt status; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FTEST_INTERRUPT_FC_ERROR                   = 0x0f, /*< code: 0x0f err: Factory test cal-interrupt factory calibration, cause: Unexpected HW behavior; Factory test cal interrupt calibration; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_SIGA_OBJ_ERROR                             = 0x10, /*< code: 0x10 err: Signal analysis-object, cause: Signal cnalysis object; report to ADI, recovery: no recovery */
    APOLLO_CPU_ADC_RX_SIGA_INTERRUPT_ERROR                       = 0x11, /*< code: 0x11 err: Signal Analysis-interrupt, cause: Unexpected HW behavior; Interrupt; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_INTERRUPT_TIMEOUT_ERROR                    = 0x12, /*< code: 0x12 err: Interrupt timeout, cause: Unexpected HW behavior; Interrupt timeout; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_SW_REVISION_SUM_ERROR                      = 0x13, /*< code: 0x13 err: Software revision summation, cause: Unexpected HW behavior; Software revision summation error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FAST_DETECT_ERROR                          = 0x14, /*< code: 0x14 err: Fast detect configuration, cause: Unexpected HW behavior; Fast detect configuration error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_CMD_INVALID_ERROR                          = 0x15, /*< code: 0x15 err: Control command was invalid, cause: Unexpected HW behavior; bad command; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_CMD_QUEUE_ERROR                            = 0x16, /*< code: 0x16 err: Control command queue, cause: Unexpected HW behavior; command queue error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_HW_SLICE_INIT_ERROR                        = 0x17, /*< code: 0x17 err: HW Slice cal Initialization, cause: Unexpected HW behavior; slice csl init; report to ADI; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_HW_TRACK_INIT_ERROR                        = 0x18, /*< code: 0x18 err: HW Track & Hold Initialization, cause: Unexpected HW behavior; tracking cal; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_UNKNOWN_ERROR                              = 0x19, /*< code: 0x19 err: Unknown or unhandled error, cause: Unexpected HW behavior; unhandled error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_FSM_CMD_ERROR                              = 0x1f, /*< code: 0x1f err: FSM command returns error, cause: Unexpected HW behavior; FSM command error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_HW_STARTUP_ERROR                           = 0x20, /*< code: 0x20 err: HW start-up error, cause: Unexpected HW behavior; start-up error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_CAL_TIMEOUT_ERROR                          = 0x21, /*< code: 0x21 err: Cal timed-out, cause: Unexpected HW behavior; Cal did not finish in expected time; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_CONFIG_INVALID_PARAM_ERROR                 = 0x22, /*< code: 0x22 err: Bad config parameter, cause: bad config parameter, recovery: invalid parameter passed */
    APOLLO_CPU_ADC_RX_CTRL_FUNC_NOT_SUPPORTED_ERROR              = 0x23, /*< code: 0x23 err: Unknown control command (see module), cause: unhandled control command, recovery: invalid parameter passed */
    APOLLO_CPU_ADC_RX_ALREADY_RUNNING_CAL_ERROR                  = 0x24, /*< code: 0x24 err: Requested to run a cal when in the middle of a cal, cause: Must wait until currently running cal completes, recovery: Check interface */
    APOLLO_CPU_ADC_RX_CMD_NEEDS_DEBUG_MODE_ERROR                 = 0x25, /*< code: 0x25 err: The ctrl or config cmd only works in debug mode, cause: cmd only works in debug mode, recovery: Check interface */
    APOLLO_CPU_ADC_RX_TRACKING_NEEDS_INIT_ERROR                  = 0x26, /*< code: 0x26 err: Must run initial cal before tracking, cause: Did not successfully complete initial ADC Rx cal, recovery: Check interface */
    APOLLO_CPU_ADC_RX_INIT_DAC_NOT_RUNNING_ERROR                 = 0x27, /*< code: 0x27 err: DAC stream not running, cause: Unexpected HW behavior; init cal; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_HW_REG_VERIFY_ERROR                        = 0x28, /*< code: 0x28 err: Some of the HW registers failed to verify, cause: Unexpected HW behavior; Used for ADI HW diagnostics; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_NVM_READING_DATA_ERROR                     = 0x29, /*< code: 0x29 err: Reading calibration data from NVM, cause: Unexpected HW behavior; NVM data reading error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_NVM_DATA_LENGTH_MISMATCH_ERROR             = 0x2a, /*< code: 0x2a err: NVM data length mismatch, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ALL_ADC_DISABLED_ERROR                     = 0x2b, /*< code: 0x2b err: The ctrl or config cmd only works when ADCs are enabled, cause: cmd only works when ADCs are enabled, recovery: Check interface */
    APOLLO_CPU_ADC_RX_NVM_DATA_VERSION_MISMATCH_ERROR            = 0x2c, /*< code: 0x2c err: NVM data version mismatch, cause: Unexpected HW behavior; NVM data version error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_SLICE_MODE_SWITCH_FAILED_ERROR         = 0x2d, /*< code: 0x2d err: ADC slice mode switch failed, cause: Unexpected HW behavior; Failed on switching ADC slice mode; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_NVM_DATA_NOT_FUSED_ERROR                   = 0x2e, /*< code: 0x2e err: NVM data not fused, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_NOT_IN_ABORT_STATE_ERROR               = 0x2f, /*< code: 0x2f err: ADC not in abort state, cause: Unexpected HW behavior; ADC abort error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_PARAM_GET_ERROR                        = 0x30, /*< code: 0x30 err: ADC wrong parameter or internal error, cause: Unexpected HW behavior; ADC parameter get error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_PARAM_SET_ERROR                        = 0x31, /*< code: 0x31 err: ADC wrong parameter or internal error, cause: Unexpected HW behavior; ADC parameter set error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_PREP_SLICE_MODE_SWITCH_FAILED_ERROR    = 0x32, /*< code: 0x32 err: Preparing ADC slice mode fast switch failed, cause: Unexpected HW behavior; Failed on preparing ADC slice mode fast switch; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_RESUM_SLICE_MODE_SWITCH_FAILED_ERROR   = 0x33, /*< code: 0x33 err: Resuming ADC slice mode fast switch failed, cause: Unexpected HW behavior; Failed on resuming ADC slice mode fast switch; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_ADC_MODE_SWITCH_ENABLED_IN_8T8R_ERROR      = 0x34, /*< code: 0x34 err: ADC slice mode switch not supported in 8T8R, cause: Unexpected HW behavior; ADC slice mode switch not supported in 8T8R; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_ADC_RX_GUARD_OBJ_ERROR                            = 0x35, /*< code: 0x35 err: Factory test guard-object, cause: Factory test cal object; report to ADI, recovery: no recovery */
    APOLLO_CPU_DAC_TX_CMD_ERROR                                  = 0x101, /*< code: 0x101 err: Bad Control command, cause: Unexpected HW behavior; bad command; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_QUEUE_ERROR                                = 0x102, /*< code: 0x102 err: Control command queue, cause: Unexpected HW behavior; command queue error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_HW_STARTUP_ERROR                           = 0x103, /*< code: 0x103 err: HW start-up error, cause: Unexpected HW behavior; start-up error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_CAL_TIMEOUT_ERROR                          = 0x104, /*< code: 0x104 err: Cal timed-out, cause: Unexpected HW behavior; Cal did not finish in expected time; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_CONFIG_INVALID_PARAM_ERROR                 = 0x105, /*< code: 0x105 err: Bad config parameter, cause: bad config parameter, recovery: invalid parameter passed */
    APOLLO_CPU_DAC_TX_UNKNOWN_ERROR                              = 0x106, /*< code: 0x106 err: Unknown or unhandled error, cause: Unexpected HW behavior; unhandled error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_CTRL_FUNC_NOT_SUPPORTED_ERROR              = 0x107, /*< code: 0x107 err: Unknown control command (see module), cause: unhandled control command, recovery: invalid parameter passed */
    APOLLO_CPU_DAC_TX_ALREADY_RUNNING_CAL_ERROR                  = 0x108, /*< code: 0x108 err: Requested to run a cal when in the middle of a cal, cause: Must wait until currently running cal completes, recovery: Check interface */
    APOLLO_CPU_DAC_TX_CMD_NEEDS_DEBUG_MODE_ERROR                 = 0x109, /*< code: 0x109 err: The ctrl or config cmd only works in debug mode, cause: cmd only works in debug mode, recovery: Check interface */
    APOLLO_CPU_DAC_TX_TRACKING_NEEDS_INIT_ERROR                  = 0x10a, /*< code: 0x10a err: Must run initial cal before tracking, cause: Did not successfully complete initial DAC Tx cal, recovery: Check interface */
    APOLLO_CPU_DAC_TX_INIT_DAC_NOT_RUNNING_ERROR                 = 0x10b, /*< code: 0x10b err: DAC stream not running, cause: Unexpected HW behavior; init cal; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_HW_REG_VERIFY_ERROR                        = 0x10c, /*< code: 0x10c err: Some of the HW registers failed to verify, cause: Unexpected HW behavior; Used for ADI HW diagnostics; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_INTERRUPT_STATUS_ERROR                     = 0x10d, /*< code: 0x10d err: Invalid interrupt status, cause: Unexpected HW behavior; Invalid value of interrupt status; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_INTERRUPT_TIMEOUT_ERROR                    = 0x10e, /*< code: 0x10e err: Timeout due to not receiving an interrupt, cause: Unexpected HW behavior; Timeout; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_BIAS_POWER_MODE_ERROR                      = 0x10f, /*< code: 0x10f err: Bias failed to power up or down, cause: Unexpected HW behavior; Bias power error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_DLL_FAILED_TO_LOCK_ERROR                   = 0x110, /*< code: 0x110 err: Clock DLL has failed to lock, cause: Unexpected HW behavior; Clock DLL unlock; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_NVM_READING_DATA_ERROR                     = 0x111, /*< code: 0x111 err: Reading calibration data from NVM, cause: Unexpected HW behavior; NVM data reading error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_NVM_DATA_LENGTH_MISMATCH_ERROR             = 0x112, /*< code: 0x112 err: NVM data length mismatch, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_ALL_DAC_DISABLED_ERROR                     = 0x113, /*< code: 0x113 err: The ctrl or config cmd only works when DACs are enabled, cause: cmd only works when DACs are enabled, recovery: Check interface */
    APOLLO_CPU_DAC_TX_NVM_DATA_NOT_FUSED_ERROR                   = 0x114, /*< code: 0x114 err: NVM data not fused, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_SW_REVISION_SUM_ERROR                      = 0x115, /*< code: 0x115 err: Software revision summation, cause: Unexpected HW behavior; Software revision summation error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_DAC_TX_INVALID_MODE_ERROR                         = 0x116, /*< code: 0x116 err: Mode (4T,8T,etc.) invalid, cause: Unexpected HW behavior; Invalid mode error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_ALREADY_RUNNING_CAL_ERROR               = 0x201, /*< code: 0x201 err: Requested to run a cal when in the middle of a cal, cause: Must wait until currently running cal completes, recovery: Check interface */
    APOLLO_CPU_SERDES_RX_CAL_INVALID_PARAM_ERROR                 = 0x202, /*< code: 0x202 err: Set Cal args Error, cause: Invalid argument passed to SERDES command, recovery: Check command arguments against supported set */
    APOLLO_CPU_SERDES_RX_TRACK_NO_INIT_ERROR                     = 0x203, /*< code: 0x203 err: Attempting to run tracking cals before init cals, cause: Serdes tracking calibration was initiated before serdes initial calibration, recovery: Run serdes initial calibration before starting serdes tracking cal */
    APOLLO_CPU_SERDES_RX_NVM_READING_DATA_ERROR                  = 0x204, /*< code: 0x204 err: Reading Rx calibration data from NVM, cause: Unexpected HW behavior; NVM data reading error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_NVM_DATA_LENGTH_MISMATCH_ERROR          = 0x205, /*< code: 0x205 err: NVM data length mismatch, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_HW_STARTUP_ERROR                        = 0x206, /*< code: 0x206 err: HW start-up error, cause: Unexpected HW behavior; start-up error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE00_ERROR                            = 0x207, /*< code: 0x207 err: Lane 0 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE01_ERROR                            = 0x208, /*< code: 0x208 err: Lane 1 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE02_ERROR                            = 0x209, /*< code: 0x209 err: Lane 2 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE03_ERROR                            = 0x20a, /*< code: 0x20a err: Lane 3 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE04_ERROR                            = 0x20b, /*< code: 0x20b err: Lane 4 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE05_ERROR                            = 0x20c, /*< code: 0x20c err: Lane 5 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE06_ERROR                            = 0x20d, /*< code: 0x20d err: Lane 6 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE07_ERROR                            = 0x20e, /*< code: 0x20e err: Lane 7 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE08_ERROR                            = 0x20f, /*< code: 0x20f err: Lane 8 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE09_ERROR                            = 0x210, /*< code: 0x210 err: Lane 9 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE10_ERROR                            = 0x211, /*< code: 0x211 err: Lane 10 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE11_ERROR                            = 0x212, /*< code: 0x212 err: Lane 11 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_LANE12_ERROR                            = 0x213, /*< code: 0x213 err: Lane 12 Error, cause: Unexpected HW behavior;  ; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_CMD_ERROR                               = 0x214, /*< code: 0x214 err: Bad Control command, cause: Unexpected HW behavior; bad command; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_QUEUE_ERROR                             = 0x215, /*< code: 0x215 err: Control command queue, cause: Unexpected HW behavior; command queue error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_UNMAPPED_ERROR                          = 0x216, /*< code: 0x216 err: Unmapped serdes error, cause: Undefined Internal serdes error, recovery: Unknown internal serdes error - Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_NVM_DATA_NOT_FUSED_ERROR                = 0x217, /*< code: 0x217 err: NVM data not fused, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_INTERRUPT_TIMEOUT_ERROR                 = 0x218, /*< code: 0x218 err: Interrupt Timeout, cause: Unexpected HW behavior; Interrupt timeout error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_RX_INVALID_LANE_NUMBER_ERROR               = 0x219, /*< code: 0x219 err: Invalid lane number, cause: Unexpected HW behavior; Invalid lane error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_CAL_LANE_POWERED_DOWN_ERROR             = 0x301, /*< code: 0x301 err: Lane is powered down or not configured, cause: Requesting to calibrate a lane that is powered-down or not configure, recovery: Check provided lane number/mask against serdes device profile */
    APOLLO_CPU_SERDES_TX_CAL_LANE_TAP_ERROR                      = 0x302, /*< code: 0x302 err: Wrong value of emphasis, cause: Requested SERDES emphasis is wrong, recovery: Check provided emphasis value */
    APOLLO_CPU_SERDES_TX_CAL_LANE_PARITY_ERROR                   = 0x303, /*< code: 0x303 err: Calculating parity, cause: Unexpected HW behavior; Parity error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_CAL_CTRL_CMD_NOT_SUPPORTED_ERROR        = 0x304, /*< code: 0x304 err: Control command not supported, cause: Requested SERDES command doesn't exist, recovery: Check provided command against supported command set */
    APOLLO_CPU_SERDES_TX_CAL_LANE_UNMAPPED_ERROR                 = 0x305, /*< code: 0x305 err: Unmapped serdes error, cause: Undefined Internal serdes error, recovery: Unknown internal serdes error - Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_CAL_UNKNOWN_ERROR                       = 0x306, /*< code: 0x306 err: Unknown or unhandled error, cause: Unexpected HW behavior; unhandled error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_CAL_INVALID_PARAM_ERROR                 = 0x307, /*< code: 0x307 err: Set Cal args Error, cause: Invalid argument passed to SERDES command, recovery: Check command arguments against supported set */
    APOLLO_CPU_SERDES_TX_CMD_ERROR                               = 0x308, /*< code: 0x308 err: Bad Control command, cause: Unexpected HW behavior; bad command; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_INIT_CAL_TIMEOUT_ERROR                  = 0x309, /*< code: 0x309 err: Init Cal didn't complete in the prescribed amount of time, cause: No serial traffic present - Check serial link integrity, recovery: Reset JESD link or device, re-run calibration If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_NVM_READING_DATA_ERROR                  = 0x30a, /*< code: 0x30a err: Reading Tx calibration data from NVM, cause: Unexpected HW behavior; NVM data reading error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_NVM_DATA_LENGTH_MISMATCH_ERROR          = 0x30b, /*< code: 0x30b err: NVM data length mismatch, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_HW_STARTUP_ERROR                        = 0x30c, /*< code: 0x30c err: HW start-up error, cause: Unexpected HW behavior; start-up error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SERDES_TX_NVM_DATA_NOT_FUSED_ERROR                = 0x30d, /*< code: 0x30d err: NVM data not fused, cause: Unexpected HW behavior; NVM data error; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_MCS_INVALID_MODE_ERROR                            = 0x401, /*< code: 0x401 err: The mode requested by the user is invalid, cause: MCS mode is invalid, recovery: Check provided configuration (MCS FW mode) */
    APOLLO_CPU_MCS_WRONG_REFERENCE_PERIOD_ERROR                  = 0x402, /*< code: 0x402 err: The reference period configuration given by the user is wrong, cause: one of the reference sysref period is zero, recovery: Check provided reference period configuration */
    APOLLO_CPU_MCS_WRONG_OFFSET_ERROR                            = 0x403, /*< code: 0x403 err: The offset configuration given by the user is wrong, cause: one of the offsets is larger than one-fourth internal sysref period, recovery: Check provided offset configuration */
    APOLLO_CPU_MCS_WRONG_STATE_BEFORE_RUN_ERROR                  = 0x404, /*< code: 0x404 err: MCS FW set in an unexpected state before running, cause: MCS FW state machine is not in start or end, recovery: Try running MCS FW again. Wait for MCS state to become start or end */
    APOLLO_CPU_MCS_REACHED_INVALID_STATE_ERROR                   = 0x405, /*< code: 0x405 err: Multi-chip Sync (MCS) FW reached an invalid state during execution., cause: Possible actions: Configure SysRefs with Faster Periods, Reduce decRate, handle as warning and poll done bit, recovery: invalid parameter passed */
    APOLLO_CPU_MCS_SYNC_TIMEOUT_ERROR                            = 0x406, /*< code: 0x406 err: Synchronization timeout, cause: Check clock, sysref, and subclass configuration, recovery: Turn on clock and/or sysref signals and try again */
    APOLLO_CPU_MCS_FW_FAILED_ERROR                               = 0x407, /*< code: 0x407 err: Multi-chip Sync (MCS) FW failed to complete synchronization in the allotted time., cause: Possible actions: Configure SysRefs with Faster Periods, Reduce decRate, handle as warning and poll done bit, recovery: invalid parameter passed */
    APOLLO_CPU_MCS_CONFIG_DATA_LENGTH_AND_OFFSET_ERROR           = 0x408, /*< code: 0x408 err: Wrong configuration size, cause: No config change has been made, recovery: Check provided configuration */
    APOLLO_CPU_MCS_CTRL_CMD_INVALID_PARAMETER_ERROR              = 0x409, /*< code: 0x409 err: Wrong configuration ID, cause: No config change has been made, recovery: Check provided configuration */
    APOLLO_CPU_MCS_INVALID_BSYNC_MODE_ERROR                      = 0x40a, /*< code: 0x40a err: The mode requested by the user is invalid, cause: MCS BSYNC mode is invalid, recovery: Check provided configuration (MCS BSYNC mode) */
    APOLLO_CPU_MCS_ALREADY_RUNNING_CAL_ERROR                     = 0x40b, /*< code: 0x40b err: Requested to run a cal when in the middle of a cal, cause: Must wait until currently running cal completes, recovery: Check interface */
    APOLLO_CPU_MCS_CTRL_INVALID_CMD_ERROR                        = 0x40c, /*< code: 0x40c err: Wrong command ID, cause: No config change has been made, recovery: Check provided command */
    APOLLO_CPU_MCS_SYSREF_WITHIN_KEEPOUT_WINDOW_ERROR            = 0x40d, /*< code: 0x40d err: External SysRef is within the Keep-Out Window, cause: SysRef Alignment did not complete, recovery: Provide an updated time-difference offset, Increase decRate, or adjust the timing of External SysRef and clock to ensure External SysRef is well-sampled */
    APOLLO_CPU_MCS_GPIO_MISCONFIGURATION_ERROR                   = 0x40e, /*< code: 0x40e err: DELADJ or DELSTR GPIO numbers are not valid, cause: The provided GPIO configuration is not supported., recovery: Check GPIO configuration */
    APOLLO_CPU_MCS_MEASUREMENT_ERROR                             = 0x40f, /*< code: 0x40f err: MCS measurement error, cause: MCS module was not able to complete a measurement., recovery: Check MCS configuration */
    APOLLO_CPU_LINEARX_RX_ALREADY_RUNNING_CAL_ERROR              = 0x580, /*< code: 0x580 err: Requested to run a cal when in the middle of a cal, cause: Must wait until currently running cal completes, recovery: Check interface */
    APOLLO_CPU_LINEARX_RX_CAL_TIMEOUT_ERROR                      = 0x581, /*< code: 0x581 err: Cal timed-out, cause: Unexpected HW behavior; Cal did not finish in expected time; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_LINEARX_RX_CTRL_FSM_CMD_NOT_SUPPORTED_ERROR       = 0x582, /*< code: 0x582 err: Command not supported, cause: The used parameter is not supported, recovery: Correct the parameter and rerun */
    APOLLO_CPU_LINEARX_RX_CTRL_SET_FSM_CMD_ERROR                 = 0x583, /*< code: 0x583 err: Wrong command sequence, cause: Unexpected command sequence or wrong pre-conditions, recovery: Check interface */
    APOLLO_CPU_LINEARX_RX_CTRL_RUN_ERROR                         = 0x584, /*< code: 0x584 err: Control wrapper error, cause: Wrong configuration or signal conditioning., recovery: Review error and status registers. */
    APOLLO_CPU_LINEARX_RX_DISABLED_ERROR                         = 0x585, /*< code: 0x585 err: The ctrl or config cmd only works when Linearx is enabled, cause: cmd only works when Linearx is enabled, recovery: Check feature */
    APOLLO_CPU_CFG_DEVICE_PROFILE_CRC_ERROR                      = 0x8001, /*< code: 0x8001 err: Failed CRC verification, cause: Programmed image is corrupted. Original image may be invalid or may have been corrupted during SPI transfer., recovery: Reprogram the device profile image. */
    APOLLO_CPU_CFG_DEVICE_PROFILE_MISSING_DATA_ERROR             = 0x8002, /*< code: 0x8002 err: Missing data for enabled channel, cause: Invalid device profile, recovery: invalid parameter passed */
    APOLLO_CPU_CFG_DEVICE_PROFILE_VERSION_MISMATCH_ERROR         = 0x8003, /*< code: 0x8003 err: Version mismatch, cause: Invalid device profile, recovery: invalid parameter passed */
    APOLLO_CPU_STRM_DRV_INVALID_PARAM_ERROR                      = 0xb101, /*< code: 0xb101 err: Invalid input parameters, cause: One or more input parameters are not valid, recovery: Firmware programmatic error. Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_TIMEOUT_ERROR                            = 0xb102, /*< code: 0xb102 err: Timer expired waiting for stream completion, cause: The stream timeout can occur due to stream processor waiting for other streams to complete., recovery: The stream execution is timed out. Rerun the feature to recover from this error. */
    APOLLO_CPU_STRM_DRV_GENERAL_ERROR                            = 0xb103, /*< code: 0xb103 err: Triggered stream reported an error, cause: The stream that is triggered either through firmware or API has generated an error., recovery: Rerun feature to recover from this error */
    APOLLO_CPU_STRM_DRV_CRC_ERROR                                = 0xb104, /*< code: 0xb104 err: Failed CRC verification, cause: Programmed image is corrupted. Original image may be invalid or may have been corrupted during SPI transfer., recovery: Reprogram the stream image. - Alternate explanation - err: Failed CRC verification, cause: The failure could be due to bit errors in SPI interface., recovery: Rerun feature to recover from this error */
    APOLLO_CPU_STRM_DRV_STM_REP_FIFO_ERROR                       = 0xb105, /*< code: 0xb105 err: Stream Processor reported a FIFO error, cause: The stream FIFO is full. This could happen due to back to back streams being triggered., recovery: Rerunning the feature could solve the issue. */
    APOLLO_CPU_STRM_DRV_STM_REP_EXT_TIMER_ERROR                  = 0xb106, /*< code: 0xb106 err: Stream Processor reported an external timer error, cause: External timer started by stream failed. This could fail if no external timers available., recovery: Rerunning the feature could solve the issue. */
    APOLLO_CPU_STRM_DRV_STM_REP_INV_INSTR_ERROR                  = 0xb107, /*< code: 0xb107 err: Stream Processor reported an invalid instruction., cause: This could happen if the stream is corrupted or stream is generated wrongly, recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_INV_AHB_ADDR_ERROR               = 0xb108, /*< code: 0xb108 err: Stream Processor reported  an invalid AHB address, cause: Wrong AHB address is accessed in the stream., recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_INV_STREAM_NUM_ERROR             = 0xb109, /*< code: 0xb109 err: Stream Processor reported an invalid stream number, cause: Invalid stream number called from stream or firmware, recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_STACK_OVERFLOW_ERROR             = 0xb10a, /*< code: 0xb10a err: Stream Processor reported a stack overflow, cause: Too many nested calls in the stream can cause this, recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_TIMEOUT_ERROR                    = 0xb10b, /*< code: 0xb10b err: Stream Processor reported a timeout error, cause: The stream did not complete within the set timeout period, recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_CHECK_INSTR_ERROR                = 0xb10c, /*< code: 0xb10c err: Stream Processor reported a check instruction error, cause: This could happen if a wrong instruction is used in the stream., recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_STM_REP_INV_SPI_ADDR_ERROR               = 0xb10d, /*< code: 0xb10d err: Stream Processor reported an invalid SPI address, cause: Invalid SPI addess accessed in the stream., recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_PREV_STM_TIMEOUT_ERROR                   = 0xb10e, /*< code: 0xb10e err: Previous Stream didn't finish, cause: The previous stream started by the stream processor or firmware did not finish, recovery: Rerun the feature. If the problem persists contact ADI. */
    APOLLO_CPU_STRM_DRV_FUNC_NOT_SUPPORTED_ERROR                 = 0xb10f, /*< code: 0xb10f err: Function not supported, cause: The functionality is not yet supported., recovery: Recreate the stream and reprogram the device. If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_PTAT_CAL_FAILED_ERROR                 = 0xb301, /*< code: 0xb301 err: RB0 Ptat calibration failed, cause: Unexpected failure in resistor trim logic, or no clock provided to trim logic., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_PTAT_R_TXBBF_INVALID_ERROR            = 0xb302, /*< code: 0xb302 err: Invalid Ptat resistor value for TxBBF, cause: Ptat trim calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_PTAT_R_UPC_INVALID_ERROR              = 0xb303, /*< code: 0xb303 err: Invalid Ptat resistor value for UPC, cause: Ptat trim calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_PTAT_R_UPC_BIAS_INVALID_ERROR         = 0xb304, /*< code: 0xb304 err: Invalid Ptat resistor value for UPC BIAS, cause: Ptat trim calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_PTAT_R_VGA_INVALID_ERROR              = 0xb305, /*< code: 0xb305 err: Invalid Ptat resistor value for VGA, cause: Ptat trim calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_TRIM_PROGRAMMING_FAILED_ERROR         = 0xb306, /*< code: 0xb306 err: Invalid Ptat resistor value for VGA, cause: Ptat trim calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_REQUESTED_DAC_BIAS_INVALID_ERROR      = 0xb307, /*< code: 0xb307 err: Invalid DAC bias requested., cause: Invalid DAC bias requested., recovery: Provide valid DAC Bias 0 - 1.25mA, 1 - 5mA. */
    APOLLO_CPU_MASTER_BIAS_RC_TUNER_PROGRAMMING_FAILED_ERROR     = 0xb308, /*< code: 0xb308 err: Invalid cap or resistor value for RC tuner, cause: RC tuner calibration generated an out-of-range result, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_MASTER_BIAS_RC_TUNER_CAL_FAILED_ERROR             = 0xb309, /*< code: 0xb309 err: Calibration not completed., cause: A0 does not supports RC Tuner cal in single clock mode., recovery: invalid parameter passed */
    APOLLO_CPU_VCO_LDO_LOWOUTPUT_ERROR                           = 0xb401, /*< code: 0xb401 err: LDO output voltage is below low side of target range, cause: VCO LDO bypass capacitor is shorted to GND, recovery: Check board layout. If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_UVL_ERROR                                 = 0xb402, /*< code: 0xb402 err: Input supply voltage is below low side of target range, cause: Input supply voltage is below undervoltage-lockout threshold, recovery: Check the input supply voltage and try again. If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_NOREF_ERROR                               = 0xb403, /*< code: 0xb403 err: Reference input voltage below low side of target range, cause: Unexpected HW behavior; Unexpected hardware behavior, reference input voltage below low side of target range; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_THERMSDN_ERROR                            = 0xb404, /*< code: 0xb404 err: Temperature is above high side of target range, cause: Temperature is above high side of target range, recovery: Check board layout. If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_CURLIM_ERROR                              = 0xb405, /*< code: 0xb405 err: Load current is above high side of target range dictated by VCO, cause: VCO LDO bypass capacitor is shorted to GND, recovery: Check board layout. If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_OVERVOLT_ERROR                            = 0xb406, /*< code: 0xb406 err: LDO output voltage is above high side of target range, cause: VCO LDO bypass capacitor is shorted to VDD, recovery: Check board layout. If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SHUNT_LDO_SLDO1P0_UV_ERROR                        = 0xb407, /*< code: 0xb407 err: LDO output voltage is below low threshold, cause: PD bit =1 or Rampup Bit =0 or Master Bias/LCR is not up, recovery: Reset device If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SHUNT_LDO_SLDO1P0_OV_ERROR                        = 0xb408, /*< code: 0xb408 err: LDO output voltage is above high threshold, cause: Unexpected HW behavior; PD bit =1 or Unexpected hardware behavior; report to ADI, recovery: Reset device. If the problem persists contact ADI. */
    APOLLO_CPU_SHUNT_LDO_SLDO1P0_POWER_NOT_OK_ERROR              = 0xb409, /*< code: 0xb409 err: LDO output voltage is not good., cause: Unexpected hardware behavior, under and over voltage status bits are set, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SHUNT_LDO_SLDO0P8_POWER_NOT_OK_ERROR              = 0xb40a, /*< code: 0xb40a err: LDO output voltage below the targeted threshold, cause: LDO output does not power up at all or it may need longer wait time to power up to the targeted threshold., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_VCO_LDO_BAD_STATE_ERROR                           = 0xb40b, /*< code: 0xb40b err: LDO logic controller failure, cause: LDO logic controller is in a bad state, recovery: Check board layout. If the problem persists contact ADI. - Alternate explanation - err: Unexpected LDO hardware behavior, cause: Unknown cause, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DWT_DRV_NOT_INITIALIZED_ERROR                     = 0xb501, /*< code: 0xb501 err: Data Watchpoint and Trace (DWT)) driver not initialized, cause: HW doesn't support the DWT the driver is expecting, recovery: Reprogram the device using a valid package and try again. If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_INVALID_AVGMASK_ERROR             = 0xb601, /*< code: 0xb601 err: HAL Invalid Average Mask, cause: parameter out of range, recovery: parameter should be > 0 and < 256, see adi_apollo_DevTempSensor_e in the API */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_CLKGEN_ERROR              = 0xb602, /*< code: 0xb602 err: HAL Temp sensor for Clk Gen PLL conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_SERDES_ERROR              = 0xb603, /*< code: 0xb603 err: HAL Temp sensor for SERDES PLL conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_ANA_MPU_A_ERROR           = 0xb604, /*< code: 0xb604 err: HAL Temp sensor for ana_mpu_top_A conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_ANA_MPU_B_ERROR           = 0xb605, /*< code: 0xb605 err: HAL Temp sensor for ana_mpu_top_B conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_LPU_VENUS_A_ERROR         = 0xb606, /*< code: 0xb606 err: HAL Temp sensor for lpu_venusdual_r0_A conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_CK_DIST_CORNER_A_ERROR    = 0xb607, /*< code: 0xb607 err: HAL Temp sensor for ck_dist_corner_A conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_LPU_VENUS_B_ERROR         = 0xb608, /*< code: 0xb608 err: HAL Temp sensor for lpu_venusdual_r0_B conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_CK_DIST_CORNER_B_ERROR    = 0xb609, /*< code: 0xb609 err: HAL Temp sensor for ck_dist_corner_B conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_TIMEOUT_CK_DIST_CENTER_ERROR      = 0xb60a, /*< code: 0xb60a err: HAL Temp sensor for ck_dist_center conversion timeout, cause: Hardware was unable to acquire temperature sample within time limit, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_DEV_TEMP_SENSOR_INVALID_EN_ERROR                  = 0xb60b, /*< code: 0xb60b err: HAL Invalid Temp sensor Enable bit, cause: parameter out of range, recovery: Temp Sensor is not on the accessed core, see adi_apollo_DevTempSensor_e in the API */
    APOLLO_CPU_PLL_CLKGEN_SYNTH_LOCK_FAILED_ERROR                = 0xb701, /*< code: 0xb701 err: Clk PLL Synth Lock Failed, cause: Unexpected hardware behavior, hardware lock detection timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_RANGE_ERROR                                   = 0xb702, /*< code: 0xb702 err: User Input freq out of range, cause: Specified frequency by the user was out of range, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_INVALID_PLL_ERROR                             = 0xb703, /*< code: 0xb703 err: User specified invalid PLL type, cause: Specified PLL name by the user was incorrect, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_NOT_ENABLED_ERROR                             = 0xb704, /*< code: 0xb704 err: Selected PLL was Not Enabled, cause: Selected PLL not enabled, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_VCO_CAL_FAILED_ERROR                          = 0xb705, /*< code: 0xb705 err: VCO calibration failed, cause: Unexpected hardware behavior, hardware VCO calibration timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_INVALID_LOOPFILTER_PARAM_ERROR                = 0xb706, /*< code: 0xb706 err: Invalid Loopfilter parameters, phase of BW out of range., cause: Specified Loopfilter parameters out of range, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_CP_CAL_FAILED_ERROR                           = 0xb707, /*< code: 0xb707 err: CP calibration failed, cause: Unexpected hardware behavior, hardware CP calibration timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_BLEED_CAL_FAILED_ERROR                        = 0xb708, /*< code: 0xb708 err: Bleed ramp calibration failed, cause: Unexpected hardware behavior, hardware Bleed calibration timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_INVALID_RX_LEAF_ERROR                         = 0xb709, /*< code: 0xb709 err: Invalid Rx Leaf hardware setting, the selected freq could not be realized., cause: Specified RX frequency could not be realized, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_INVALID_TX_LEAF_ERROR                         = 0xb70a, /*< code: 0xb70a err: Invalid Tx Leaf hardware setting, the selected freq could not be realized., cause: Specified TX frequency could not be realized, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_PHASE_SYNC_INVALID_SETTING_ERROR              = 0xb70b, /*< code: 0xb70b err: Phase Sync Invalid mode setting, cause: Specified Phase sync mode invalid, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_PHASE_SYNC_TIMEOUT_ERROR                      = 0xb70c, /*< code: 0xb70c err: Phase Sync timeout, cause: Unexpected hardware behavior, phase sync calibration timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_PHASE_MISMATCH_ERROR                          = 0xb70d, /*< code: 0xb70d err: Phase Sync phase mismatch, cause: Unexpected hardware behavior, thase sync Golden counter mismatch, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_EXT_LO_IN_RANGE_ERROR                         = 0xb70e, /*< code: 0xb70e err: External LO Input freq out of range, cause: Specified external LO frequncy out of range, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_SWEEPFAIL_ARM_TOO_FAST_ERROR                  = 0xb70f, /*< code: 0xb70f err: Clk Sweep test fail, Arm clock speed too fast and could not be realized., cause: Unexpected hardware behavior, clk Sweep test fail, ARM speed cannot be realized, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_TEMPSENSOR_TIMEOUT_ERROR                      = 0xb710, /*< code: 0xb710 err: PLL temp sensor timeout, cause: Unexpected hardware behavior, PLL temp sensor reading did not finish, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_MUST_BE_IN_TEST_MODE_ERROR                    = 0xb711, /*< code: 0xb711 err: PLL Invalid debug mode setting, cause: PLL Attempting to enter a debug mode but not in debug mode, recovery: invalid parameter passed */
    APOLLO_CPU_PLL_PHASE_GCNT_SDM_MCS_TIMEOUT_ERROR              = 0xb712, /*< code: 0xb712 err: GCNT SDM Mcs timeout, cause: Unexpected hardware behavior, GCNT SDM Mcs h/w Timeout, recovery: Rerun feature to recover from this error */
    APOLLO_CPU_PLL_PHASE_GCNT_CLKGEN_MCS_TIMEOUT_ERROR           = 0xb713, /*< code: 0xb713 err: GCNT ClkGen Mcs timeout, cause: Unexpected hardware behavior, GCNT Clkgen Mcs h/w Timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_FORCED_ALC_TIMEOUT_ERROR                      = 0xb714, /*< code: 0xb714 err: Forced ALC Enable-Disable timeout, cause: Unexpected hardware behavior, Forced ALC Enable-Disabled h/w Timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_PLL_SERDES_SYNTH_LOCK_FAILED_ERROR                = 0xb715, /*< code: 0xb715 err: Serdes PLL Synth Lock Failed, cause: Unexpected hardware behavior, hardware lock detection timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_JESD_DRV_FRM_LANE_OVERLAP_ERROR                       = 0xb801, /*< code: 0xb801 err: Serializer lane overlap, cause: Incorrect serializer lane assignment, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_LANE_OVERLAP_ERROR                      = 0xb802, /*< code: 0xb802 err: Deserializer lane overlap, cause: Incorrect deserializer lane assignment, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_INVALID_SAMPRATE_ERROR                   = 0xb803, /*< code: 0xb803 err: Framer invalid sample rate, cause: Incorrect framer sample rate in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_LKSH_INVALID_SAMPRATE_ERROR                  = 0xb804, /*< code: 0xb804 err: Link sharing invalid sample rate, cause: Incorrect link sharing sample rate in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_INVALID_SAMPRATE_ERROR                  = 0xb805, /*< code: 0xb805 err: Deframer invalid sample rate, cause: Incorrect deframer sample rate in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_SYNC_PAD_CFG_INVALID_ERROR               = 0xb806, /*< code: 0xb806 err: Invalid framer Sync Pad configuration, cause: Incorrect framer sync pad configuration provided, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_SYNC_PAD_CFG_INVALID_ERROR              = 0xb807, /*< code: 0xb807 err: Invalid deframer Sync Pad configuration, cause: Incorrect deframer sync pad configuration provided, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM0_NOT_ENABLED_ERROR                       = 0xb808, /*< code: 0xb808 err: Framer 0 must be enabled, cause: Framer 0 is not used in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_INVALID_SPLXBAR_ENTRY_ERROR              = 0xb809, /*< code: 0xb809 err: Invalid framer sample crossbar entry, cause: Invalid framer sample crossbar entry in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_INVALID_LINK_LAYER_MODE_ERROR            = 0xb80a, /*< code: 0xb80a err: Invalid framer link layer mode of operation, cause: Invalid framer mode parameter in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_INVALID_SPLXBAR_ENTRY_ERROR             = 0xb80b, /*< code: 0xb80b err: Invalid deframer sample crossbar entry, cause: Invalid deframer sample crossbar entry in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_INVALID_LINK_LAYER_MODE_ERROR           = 0xb80c, /*< code: 0xb80c err: Invalid deframer link layer mode of operation, cause: Invalid deframer mode parameter in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_S_NOT_POW2_ERROR                         = 0xb80d, /*< code: 0xb80d err: Framer S parameter is not a power of 2, cause: Invalid framer S parameter in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DFRM_S_NOT_POW2_ERROR                        = 0xb80e, /*< code: 0xb80e err: Deframer S parameter is not a power of 2, cause: Invalid deframer S parameter in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_INVALID_CONFIG_DET_ERROR                 = 0xb80f, /*< code: 0xb80f err: Invalid framer config detected by JESD hardware block, cause: Invalid framer configuration detected by the JESD hardware block, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_DRFM_INVALID_CONFIG_DET_ERROR                = 0xb810, /*< code: 0xb810 err: Invalid deframer config detected by Jesd h/w block, cause: Invalid deframer configuration detected by the JESD hardware block, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_LKSH_INVALID_SPLXBAR_ENTRY_ERROR             = 0xb811, /*< code: 0xb811 err: Invalid sample crossbar entry in link sharing profile, cause: Invalid link sharing sample crossbar entry in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_UNSUPPORTED_FREQ_DIV_RATIO_ERROR             = 0xb812, /*< code: 0xb812 err: Unsupported frequency divide ratio, cause: Invalid frequency parameter in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_INVALID_FREQ_INPUT_ERROR                     = 0xb813, /*< code: 0xb813 err: Invalid frequency, cause: Invalid frequency parameter provided in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_FRM_NUM_OF_CONV_INVALID_ERROR                = 0xb814, /*< code: 0xb814 err: Invalid number of converters, cause: Invalid number of converters specified in the profile, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_SER_INVALID_LANE_SELECTED_ERROR              = 0xb815, /*< code: 0xb815 err: Invalid serializer lane selected, cause: Invalid serializer lane selected, recovery: invalid parameter passed */
    APOLLO_JESD_DRV_SER_INVALID_LANE_PARAMETER_ERROR             = 0xb816, /*< code: 0xb816 err: Invalid serializer lane parameter, cause: Invalid serializer lane parameter, recovery: invalid parameter passed */
    APOLLO_UART_DRV_INVALID_SCLK_FREQ_ERROR                      = 0xb901, /*< code: 0xb901 err: Invalid SCLK freq, cause: SCLK is too low for configured UART bit rate, check device clock setting., recovery: invalid parameter passed */
    APOLLO_GPIO_DRV_INVALID_SIGNAL_ID_ERROR                      = 0xbc01, /*< code: 0xbc01 err: Invalid signal ID provided, cause: Invalid signal ID provided, recovery: invalid parameter passed */
    APOLLO_GPIO_DRV_INVALID_PIN_ID_ERROR                         = 0xbc02, /*< code: 0xbc02 err: Invalid GPIO pin number provided, cause: Invalid GPIO pin number provided, recovery: invalid parameter passed */
    APOLLO_HSCI_DRV_UNKNOWN_COMMAND_ERROR                        = 0xbd00, /*< code: 0xbd00 err: Unknown HSCI command received, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_BAD_PARITY_DETECTED_ERROR                    = 0xbd01, /*< code: 0xbd01 err: Bad parity detected, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_ADDRESS_SIZE_ERROR                           = 0xbd02, /*< code: 0xbd02 err: More Than 4 address bytes are received, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_BYTE_NUM_SIZE_ERROR                          = 0xbd03, /*< code: 0xbd03 err: More Than 3 byte_num bytes are received, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_WRITE_FIFO_FULL_ERROR                        = 0xbd04, /*< code: 0xbd04 err: Write FIFO becomes full, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_READ_FIFO_FULL_ERROR                         = 0xbd05, /*< code: 0xbd05 err: Read FIFO becomes full, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_HREADY_TIMEOUT_ERROR                         = 0xbd06, /*< code: 0xbd06 err: HREADY time out, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_HSCI_DRV_AHB_BUS_TRANSACTION_ERROR                    = 0xbd07, /*< code: 0xbd07 err: AHB bus transaction error, cause: Unexpected HSCI error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_SYSCLK_DRV_SKEW_NOT_CORRECTED_AT_CLOCK_RECEIVER_ERROR = 0xbe01, /*< code: 0xbe01 err: skew not corrected at clock receiver, cause: user supplied clock has bad skew, recovery: invalid parameter passed */
    APOLLO_SYSCLK_DRV_MAX_CORRECTION_VALUE_REACHED_AT_TL_ERROR   = 0xbe02, /*< code: 0xbe02 err: very bad skew or dc in the clock supplied, cause: user supplied clock has bad skew or dc., recovery: invalid parameter passed */
    APOLLO_SYSCLK_DRV_CONDITIONING_FAILED_ERROR                  = 0xbe03, /*< code: 0xbe03 err: clock is not corrected/conditioned, cause: user supplied clock can't be corrected., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_SYSCLK_DRV_INCORRECT_ARM_CLOCK_FREQ_ERROR             = 0xbe04, /*< code: 0xbe04 err: Clock is not switched from Ring osc, cause: user requested arm clk freq is > 500 MHZ, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_SYSCLK_DRV_INVALID_CLK_PATH_SEGMENT_ERROR             = 0xbe05, /*< code: 0xbe05 err: invalid clock path segment, cause: user requested to calibrate invalid clock path segment, recovery: invalid parameter passed */
    APOLLO_SYSCLK_DRV_CONDITIONING_MAX_REACHED_ERROR             = 0xbe06, /*< code: 0xbe06 err: clock is not corrected/conditioned, cause: cause: max correction code is reached,, recovery: recovery: Handle error as warning, Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_GET_VERSION_FAILED_ERROR                       = 0xbf01, /*< code: 0xbf01 err: failed on getting TE version, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_ENABLE_FEATURES_FAILED_ERROR                   = 0xbf02, /*< code: 0xbf02 err: failed on enabling features, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_GET_ENABLED_FEATURES_FAILED_ERROR              = 0xbf03, /*< code: 0xbf03 err: failed on getting enabled features, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_INVALID_CHALLENGE_TYPE_ERROR                   = 0xbf04, /*< code: 0xbf04 err: Invalid challenge type, cause: User inputs invalid challenge type, recovery: invalid parameter passed */
    APOLLO_TE_DRV_REQUEST_CHALLENGE_FAILED_ERROR                 = 0xbf05, /*< code: 0xbf05 err: failed on requesting challenge, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_SECURE_DEBUG_ACCESS_FAILED_ERROR               = 0xbf06, /*< code: 0xbf06 err: failed on securing debug access, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_TE_DRV_SET_RMA_FAILED_ERROR                           = 0xbf07, /*< code: 0xbf07 err: failed on setting RMA, cause: Unexpected or unhandled TE mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_GP_TIMER_ERROR                             = 0xff01, /*< code: 0xff01 err: General-purpose timer error, cause: Software Timer allocation failure., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_MAILBOX_ERROR                              = 0xff02, /*< code: 0xff02 err: Mailbox generic error, cause: Unexpected or unhandled mailbox error encountered, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_MAILBOX_BUSY_ERROR                         = 0xff03, /*< code: 0xff03 err: Mailbox busy error, cause: The requested mailbox hardware is in use and cannot receive commands, recovery: Rerun feature to recover from this error */
    APOLLO_CPU_SYSTEM_MAILBOX_INVALID_HANDLE_ERROR               = 0xff04, /*< code: 0xff04 err: Mailbox handle invalid, cause: Mailbox operation requested on an invalid mailbox, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_MAILBOX_INVALID_CMD_ID_ERROR               = 0xff05, /*< code: 0xff05 err: Mailbox invalid command id, cause: An unhandled command ID was provided, recovery: Check feature */
    APOLLO_CPU_SYSTEM_MAILBOX_LINK_BUSY_ERROR                    = 0xff06, /*< code: 0xff06 err: Mailbox link busy, cause: The requested mailbox link is in use and cannot receive commands, recovery: Rerun feature to recover from this error */
    APOLLO_CPU_SYSTEM_MAILBOX_CMD_TOO_LARGE_ERROR                = 0xff07, /*< code: 0xff07 err: Mailbox command too large for link buffer, cause: Command payload is unexpectedly too large for mailbox buffer, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_MAILBOX_INVALID_CMD_PARAM_ERROR            = 0xff08, /*< code: 0xff08 err: Mailbox invalid command parameter(s) supplied, cause: Mailbox received a command with invalid or out of range parameters(s), recovery: Rerun feature to recover from this error */
    APOLLO_CPU_SYSTEM_INVALID_CPU_ID_ERROR                       = 0xff09, /*< code: 0xff09 err: Invalid CPU ID specified, cause: Given CPU ID parameter is invalid., recovery: Reprogram the CPU firmware image. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_NULL_PTR_ERROR                             = 0xff0a, /*< code: 0xff0a err: Null pointer provided, cause: Programmed image is corrupted. Original image may be invalid or may have been corrupted during SPI transfer., recovery: Reprogram the CPU firmware image. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_TASK_CREATE_ERROR                          = 0xff0b, /*< code: 0xff0b err: O/S Task create error, cause: This can happen if wrong parameters are passed to the Task Create API, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_CAPTURE_RAM_LOCK_ERROR                     = 0xff0c, /*< code: 0xff0c err: Failed to lock specified capture RAM, cause: API failed to lock ram access, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_CAPTURE_RAM_UNLOCK_ERROR                   = 0xff0d, /*< code: 0xff0d err: Failed to unlock specified capture RAM, cause: API failed to unlock ram for access, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_CTRL_CMD_ARG_INVALID_ERROR                 = 0xff0e, /*< code: 0xff0e err: The Ctrl Cmd argument is not valid, cause: A wrong value is input by the user as the argument, recovery: Verify command argument is correct and try again. */
    APOLLO_CPU_SYSTEM_INIT_CAL_INIT_ERROR                        = 0xff0f, /*< code: 0xff0f err: Init cal framework initialization error, cause: Unexpected error encountered during init cal framework initialization., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_MAILBOX_TIMEOUT_CORE0_ERROR                = 0xff10, /*< code: 0xff10 err: Inter-processor mailbox timeout, cause: Core-1 didn't received an answer from a command it sent to Core-0, recovery: Rerun feature to recover from this error */
    APOLLO_CPU_SYSTEM_INIT_CAL_ABORTED_ERROR                     = 0xff14, /*< code: 0xff14 err: Init cal interrupted by ABORT command, cause: Init cal is aborted due to a ABORT command, recovery: Rerun the init cals. */
    APOLLO_CPU_SYSTEM_INIT_CAL_WARM_BOOT_CHKSUM_ERROR            = 0xff15, /*< code: 0xff15 err: Init cal warm boot checksum error, cause: Init cal data image is corrupted., recovery: Rerun init cal */
    APOLLO_CPU_SYSTEM_INIT_CAL_INV_CHAN_MASK_ERROR               = 0xff16, /*< code: 0xff16 err: Init cal invalid channel mask error, cause: Channel numbers that are not enabled in the profile are selected in the channel mask., recovery: Rerun the init cal with correct channel mask. */
    APOLLO_CPU_SYSTEM_INIT_CAL_INV_CAL_MASK_ERROR                = 0xff17, /*< code: 0xff17 err: Init cal invalid cal mask error, cause: The Init cal mask might have unsupported cals., recovery: Rerun the init cal with correct cal mask. */
    APOLLO_CPU_SYSTEM_INIT_CAL_ALREADY_IN_PROGRESS_ERROR         = 0xff18, /*< code: 0xff18 err: Init cal already in progress, cause: The Init cal command is sent again while one is in progress, recovery: Make sure not to send the init cal command while one is in progress. */
    APOLLO_CPU_SYSTEM_EFUSE_PROFILE_ERROR                        = 0xff19, /*< code: 0xff19 err: Profile checksum failed or bad profile wrt to EFUSE, cause: The Device Profile image is corrupted. Original image may be invalid or may have been corrupted during SPI transfer., recovery: Reprogram the Device Profile image. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_EVENT_CREATE_ERROR                         = 0xff1c, /*< code: 0xff1c err: Could not create the event, cause: This can happen if wrong parameters are passed to the OS call., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_QUEUE_CREATE_ERROR                         = 0xff1d, /*< code: 0xff1d err: Could not create the Queue, cause: This can happen if wrong parameters are passed to the OS call., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_TIMER_CREATE_ERROR                         = 0xff1e, /*< code: 0xff1e err: Could not create the timer, cause: This can happen if wrong parameters are passed to the OS call., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_QUEUE_POST_ERROR                           = 0xff1f, /*< code: 0xff1f err: Failed to post the message, cause: This can happen if the queue is full., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_QUEUE_RECV_ERROR                           = 0xff20, /*< code: 0xff20 err: Failed to receive the message, cause: This can happen if wrong parameters are passed to the OS call., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_RPC_MGR_RECV_ERROR                         = 0xff21, /*< code: 0xff21 err: RPC manager failed to receive the message from the other core, cause: Check if the other core is running., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_RPC_MGR_TRANSMIT_ERROR                     = 0xff22, /*< code: 0xff22 err: RPC manager failed to transmit the message to the other core, cause: This can happen if wrong parameters are passed to the OS call., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_STACK_OVERFLOW_ERROR                       = 0xff23, /*< code: 0xff23 err: Task stack overflow, cause: This can happen if the OS configuration is corrupted., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_TASK_DOES_NOT_EXIST_ERROR                  = 0xff24, /*< code: 0xff24 err: Commands sent to task that does not exist, cause: This can happen if a command is sent to a channel that is not enabled in the profile or disabled., recovery: Rerun the feature with the correct channel mask. */
    APOLLO_CPU_SYSTEM_CTRL_TASK_INVALID_MSG_ERROR                = 0xff25, /*< code: 0xff25 err: Invalid message passed to ctrl task, cause: This can happen if an unsupported command is sent., recovery: Rerun the feature with the correct command. */
    APOLLO_CPU_SYSTEM_INSUFFICIENT_MEMORY_ERROR                  = 0xff26, /*< code: 0xff26 err: Insufficient memory available for the requested operation, cause: This can happen if an insufficient buffer size is sent for a command. For example get config or get cal status., recovery: Rerun the command with the correct buffer size allocated. */
    APOLLO_CPU_SYSTEM_CTRL_FUNC_NOT_SUPPORTED_ERROR              = 0xff27, /*< code: 0xff27 err: The given cal does not support the control function, cause: The control command that is not supported is sent to the cal., recovery: Rerun the command with the correct control command. */
    APOLLO_CPU_SYSTEM_SET_CONFIG_FUNC_NOT_SUPPORTED_ERROR        = 0xff28, /*< code: 0xff28 err: The given cal does not support the set config function, cause: The set configuration command is sent to the cal which does not support it., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_GET_CONFIG_FUNC_NOT_SUPPORTED_ERROR        = 0xff29, /*< code: 0xff29 err: The given cal does not support the get config function, cause: The get configuration command is sent to the cal which does not support it., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_STATUS_FUNC_NOT_SUPPORTED_ERROR            = 0xff2a, /*< code: 0xff2a err: The given cal does not support the get status function, cause: The get status command is sent to the cal which does not support it., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_INVALID_CHANNEL_MASK_ERROR                 = 0xff2b, /*< code: 0xff2b err: The given channel is not enabled in the profile, cause: This can happen if a channel is not enabled in the profile is getting enabled or disabled., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_INVALID_CONFIG_OBJECT_ERROR                = 0xff2c, /*< code: 0xff2c err: The given target configuration object is invalid, cause: This can happen if the set configuration command is sent with a wrong configuration object ID., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_INVALID_CONFIG_SIZE_ERROR                  = 0xff2d, /*< code: 0xff2d err: The given configuration size is invalid, cause: This can happen if the set configuration command is sent with wrong configuration size., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_INVALID_CONFIG_OFFSET_ERROR                = 0xff2e, /*< code: 0xff2e err: The given configuration offset is invalid, cause: This can happen if the set or get configuration command is sent with wrong offset into the configuration structure., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_INVALID_CONFIG_STATE_ERROR                 = 0xff2f, /*< code: 0xff2f err: The config cannot be updated in current state of module., cause: The framework configuration cannot be changed when the init cals are running., recovery: Rerun the configuration command after the init cals are complete. */
    APOLLO_CPU_SYSTEM_INVALID_PACK_MASK_ERROR                    = 0xff30, /*< code: 0xff30 err: The given pack is invalid or not enabled in the profile, cause: This can happen if a pack is invalid or not enabled in the profile is getting enabled or disabled., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_HAL_FUNC_NOT_IMPLEMENTED_ERROR             = 0xff51, /*< code: 0xff51 err: HAL Functionality not implemented, cause: HAL functionality encountered has not been implemented in ARM FW, recovery: Firmware update may be required. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_HAL_INVALID_CHANNEL_ERROR                  = 0xff52, /*< code: 0xff52 err: HAL Invalid channel, cause: Invalid channel configuration in profile or an invalid channel requested., recovery: Verify channel configuration and reprogram the Device Profile image. */
    APOLLO_CPU_SYSTEM_HAL_INVALID_LO_ERROR                       = 0xff53, /*< code: 0xff53 err: HAL Invalid LO, cause: Invalid PLL chosen for LO. This could be due to corrupted program memory., recovery: Reprogram the CPU firmware image. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_AHB_COMMON_INVALID_ERROR                   = 0xff54, /*< code: 0xff54 err: AHB (Common)) error detected, cause: Invalid SPI address access either an invalid address or span of registers, recovery: Verify address and range are correct for the SPI region being accessed */
    APOLLO_CPU_SYSTEM_AHB_CPU0_INVALID_ERROR                     = 0xff55, /*< code: 0xff55 err: AHB (CPU0)) error detected, cause: Core0 FW accessing invalid memory address or range, recovery: If the problem persists acquire a memdump and contact ADI */
    APOLLO_CPU_SYSTEM_AHB_CPU1_INVALID_ERROR                     = 0xff56, /*< code: 0xff56 err: AHB (CPU1)) error detected, cause: Core1 FW accessing invalid memory address or range, recovery: If the problem persists acquire a memdump and contact ADI */
    APOLLO_CPU_SYSTEM_SECONDARY_CPU_BOOT_FAILED_ERROR            = 0xff58, /*< code: 0xff58 err: Primary CPU detected secondary CPU(s) boot failure, cause: Secondary core not completing boot, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_UTIL_TIMER_ERROR                           = 0xff59, /*< code: 0xff59 err: Utilities timer internal error, cause: RTOS taskscheduler not running for timer request, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_LOGEN_INVALID_LO_CONFIG_ERROR              = 0xff5a, /*< code: 0xff5a err: LOGEN Invalid LO Input/Output Configuration, cause: User selected an invalid logen config, verify Device Proifle/Configurator settings., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_FORCE_EXCEPTION_COMMAND_ERROR              = 0xff5c, /*< code: 0xff5c err: Intentional crash, from force exception command, cause: API command sent to force an exception in the ARM, recovery: no recovery */
    APOLLO_CPU_SYSTEM_CONFIG_LOCKED_ERROR                        = 0xff5d, /*< code: 0xff5d err: Configuration locked, for updating, cause: The configuration is not unlocked before sending the config command., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_CONFIG_KEY_MISMATCH_ERROR                  = 0xff5e, /*< code: 0xff5e err: The given key to unlock configuration did not match with the key in current package, cause: The configuration key did not match required key to unlock., recovery: Use the correct key given by ADI and try to unlock the configuration again. */
    APOLLO_CPU_SYSTEM_CONFIG_LIMIT_REACHED_ERROR                 = 0xff5f, /*< code: 0xff5f err: Number of configuration update limit reached, cause: Reached the limit of the number configuration commmands allowed., recovery: Reset the device to send new set of configuration parameters. */
    APOLLO_CPU_SYSTEM_DBG_KEY_MISMATCH_ERROR                     = 0xff60, /*< code: 0xff60 err: The given key to enter debug mode did not match with the key to enter debug mode, cause: The debug key did not match required key to unlock., recovery: Try to send the command again with the right Debug key. Contact ADI to get the correct key if the problem persists. */
    APOLLO_CPU_SYSTEM_CTRL_CMD_LENGTH_INVALID_ERROR              = 0xff61, /*< code: 0xff61 err: The Set Ctrl Cmd length is less than expected or greater than max data size allowed, cause: The control command buffer is greater than the supported size., recovery: Change the size of the control command payload or increase the control command buffer size. */
    APOLLO_CPU_SYSTEM_WATCHDOG_EXPIRED_ERROR                     = 0xff62, /*< code: 0xff62 err: Watchdog timer expired, system is unresponsive, cause: Not all firmware tasks completed in the expected time frame., recovery: Collect memory dump to provide debug information and reset device. - Alternate explanation - err: Not all firmware tasks completed in the expected time frame, possibly due to bad parameters, cause: Collect memory dump to provide debug information, verify that all calibrations and commands have valid parameters, and reset device., recovery: invalid parameter passed */
    APOLLO_CPU_SYSTEM_SHARED_MEM_MUTEX_TIMEOUT_ERROR             = 0xff63, /*< code: 0xff63 err: Shared memory mutex timeout, cause: This could happen if the shared mutex cannot be obtained within the timeout period, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_SWBKPT_INVALID_TABLE_INDEX_ERROR           = 0xff64, /*< code: 0xff64 err: The given index to the SW Breakpoint Table is out of range, cause: This is a programmatic error and is not expected to happen, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_SHARED_MEM_MUTEX_TAKEN_ERROR               = 0xff65, /*< code: 0xff65 err: Shared memory mutex already taken, cause: This could happen if trying to take the mutex which is already taken., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_SHARED_MEM_MUTEX_RELEASE_ERROR             = 0xff66, /*< code: 0xff66 err: Shared memory mutex released without owning it, cause: This could happen if trying to release the mutex which is not owned., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_UNSUPPORTED_CHANS_PER_CPU_ERROR            = 0xff67, /*< code: 0xff67 err: This system is being configured to support too many channels per CPU., cause: This is a Configurator channel enable issue., recovery: Check the profile and the Configurator logic. */
    APOLLO_CPU_SYSTEM_INVALID_STATUS_SIZE_ERROR                  = 0xff68, /*< code: 0xff68 err: The given status size is invalid, cause: The user requested the status size larger than supported size., recovery: Change the size of the status command buffer size. */
    APOLLO_CPU_SYSTEM_STARTUP_TIMEOUT_ERROR                      = 0xff69, /*< code: 0xff69 err: Init and tracking start-up functions still running, cause: The ctrl task waits a predefined amount of time which is not long enough, recovery: Increase the timeout in the FW ctrl task. */
    APOLLO_CPU_SYSTEM_DBG_CMD_NOT_SUPPORTED_ERROR                = 0xff6a, /*< code: 0xff6a err: The debug command is not supported after entering debug mode, cause: Wrong or not supported debug command, recovery: Try to send the command again with the right debug command. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_DBG_CMD_PARAMS_INVALID_ERROR               = 0xff6b, /*< code: 0xff6b err: The debug command parameters is not supported after entering debug mode, cause: Wrong or not supported debug command parameters, recovery: Try to send the command again with the right debug command parameters. If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_HAL_TX_ATTEN_RESTORE_ERROR                 = 0xff6c, /*< code: 0xff6c err: HAL Tx attenuation restore failed, cause: Cannot restore Tx attenuation because the settings were not saved, recovery: Unexpected error - If the problem persists acquire a memdump and contact ADI */
    APOLLO_CPU_SYSTEM_DEBUG_FUNC_NOT_SUPPORTED_ERROR             = 0xff6d, /*< code: 0xff6d err: The given cal does not support the debug function, cause: The debug command that is not supported is sent to the cal., recovery: Rerun the command with the correct control command. */
    APOLLO_CPU_SYSTEM_HEALTHMON_TOO_MANY_TASKS_ERROR             = 0xff6e, /*< code: 0xff6e err: The health monitor memory allocation is not large enough for the current number of tasks, cause: The number of RTOS tasks is greater than expected., recovery: no recovery */
    APOLLO_CPU_SYSTEM_SEM_CREATE_FAILED_ERROR                    = 0xff6f, /*< code: 0xff6f err: Failed to create system semaphore, cause: This could happen because the system applies the semphore failure., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_SEM_TAKE_FAILED_ERROR                      = 0xff70, /*< code: 0xff70 err: Semaphore take operation failure, cause: This could happen because the system failedin taking the semphore., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_SIMULATED_ERROR                            = 0xff71, /*< code: 0xff71 err: Error code used for ADI system testing, cause: This error is not possible during customer use, recovery: no recovery */
    APOLLO_CPU_SYSTEM_PRODUCT_ID_ERROR                           = 0xff72, /*< code: 0xff72 err: Product ID is invalid, cause: Product ID/Silicon version is unknown., recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_RADIO_LOOPBACK_ERROR                       = 0xff73, /*< code: 0xff73 err: Radio loopback requested but being used, cause: A cal is already using a radio loopback, recovery: Verify cal logic to find multiple request */
    APOLLO_CPU_SYSTEM_TIMER_STOP_ERROR                           = 0xff74, /*< code: 0xff74 err: System timer stop error, cause: System timer didn't stop within timeout, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_OUT_OF_RESET_ERROR                         = 0xff75, /*< code: 0xff75 err: Indicates system is out of reset. Used to indicate if system has reset before mailbox could respond to a command, cause: System initializes mailbox response with this error code, recovery: Restart mailbox interaction sequence as system has reset */
    APOLLO_CPU_SYSTEM_BOOT_NVM_POWERUP_ERROR                     = 0xff76, /*< code: 0xff76 err: NVM power up error in boot, cause: NVM power up error in boot, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_NVM_READ_SETUP_ERROR                  = 0xff77, /*< code: 0xff77 err: NVM read set up error in boot, cause: NVM read set up error in boot, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_PORB_RX_ERROR                         = 0xff78, /*< code: 0xff78 err: PORB Rx Status, cause: PORB RX not ready, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_PORB_TX_ERROR                         = 0xff79, /*< code: 0xff79 err: PORB Tx Status, cause: PORB TX not ready, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_PORB_SERDES_ERROR                     = 0xff7a, /*< code: 0xff7a err: PORB serdes Status, cause: PORB serdes not ready, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_PORB_MCS_MB_CK_ERROR                  = 0xff7b, /*< code: 0xff7b err: PORB mcs_mb_ck Status, cause: PORB mcs_mb_ck not ready, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_CHIP_MODE_MISMATCH_ERROR              = 0xff7c, /*< code: 0xff7c err: chip mode (8T8R/4T4R) mismatch error, cause: chip mode (8T8R/4T4R) mismatch between hardware and profile, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_2ND_REG_INIT_ERROR                    = 0xff7d, /*< code: 0xff7d err: secondary register initialization error, cause: 2nd secondary register initialization, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_EC_TRANSFER_ERROR                     = 0xff7e, /*< code: 0xff7e err: boot EC transfer error, cause: boot EC transfer, recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_BOOT_NVM_READ_ERROR                        = 0xff7f, /*< code: 0xff7f err: boot NVM read error, cause: boot EC transfer , recovery: Reset device If the problem persists contact ADI. */
    APOLLO_CPU_SYSTEM_INVALID_SW_TRIM_ERROR                      = 0xff80, /*< code: 0xff80 err: Invalid SW trim in profile., cause: invalid sw_trim in profile error, recovery: no recovery */
    APOLLO_CPU_SYSTEM_SW3_TRIM_MISMATCH_SW1_PART_ERROR           = 0xff81, /*< code: 0xff81 err: SW3 trim in profile mismatches SW1 part., cause: sw3_trim in profile mismatches SW1 part error, recovery: no recovery */
    APOLLO_CPU_SYSTEM_SW5_TRIM_MISMATCH_SW1_PART_ERROR           = 0xff82, /*< code: 0xff82 err: SW5 trim in profile mismatches SW1 part., cause: sw5_trim in profile mismatches SW1 part error, recovery: no recovery */
    APOLLO_CPU_SYSTEM_SW5_TRIM_MISMATCH_SW3_PART_ERROR           = 0xff83, /*< code: 0xff83 err: SW5 trim in profile mismatches SW3 part., cause: sw5_trim in profile mismatches SW3 part error, recovery: no recovery */

    //APOLLO_CPU_CAL_EXIT_OCCURRED_ERROR                           = 0xffff, /*< code: 0xffff calibration exit occurred */
    //APOLLO_CPU_FORCE_UINT32                                      = (int32_t)0xffffffff  /*< code: (int32_t)0xffffffff used to force enumeration to be 32bits in width */
} adi_apollo_mailbox_cpu_error_code_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_init_calibrations_msk_e
 */
typedef enum
{
    APOLLO_INIT_CAL_IC_ADC_RX     = 0x00, /*< code: 0x00 ADC Rx */
    APOLLO_INIT_CAL_IC_DAC_TX     = 0x01, /*< code: 0x01 DAC Tx */
    APOLLO_INIT_CAL_IC_SERDES_RX  = 0x02, /*< code: 0x02 SERDES Rx Initial Cal */
    APOLLO_INIT_CAL_IC_SERDES_TX  = 0x03, /*< code: 0x03 SERDES Tx Initial Cal */
    APOLLO_INIT_CAL_IC_MCS        = 0x04, /*< code: 0x04 MCS Calibration */
    APOLLO_INIT_CAL_IC_LINEARX_RX = 0x05, /*< code: 0x05 LINEARX Rx Initial Cal */
    APOLLO_INIT_CAL_IC_TEST_1     = 0x06  /*< code: 0x06 Test cal 1, Initial Cal Framework test */
} adi_apollo_mailbox_apollo_init_calibrations_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_rx_channel_number_msk_e
 */
typedef enum
{
    APOLLO_RX_CHANNEL_CH_A0 = 0x00, /*< code: 0x00 Channel A0 */
    APOLLO_RX_CHANNEL_CH_A1 = 0x01, /*< code: 0x01 Channel A1 */
    APOLLO_RX_CHANNEL_CH_A2 = 0x02, /*< code: 0x02 Channel A2 - 8T/8R Only */
    APOLLO_RX_CHANNEL_CH_A3 = 0x03, /*< code: 0x03 Channel A3 - 8T/8R Only */
    APOLLO_RX_CHANNEL_CH_B0 = 0x04, /*< code: 0x04 Channel B0 */
    APOLLO_RX_CHANNEL_CH_B1 = 0x05, /*< code: 0x05 Channel B1 */
    APOLLO_RX_CHANNEL_CH_B2 = 0x06, /*< code: 0x06 Channel B2 - 8T/8R Only */
    APOLLO_RX_CHANNEL_CH_B3 = 0x07  /*< code: 0x07 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_rx_channel_numbers_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_tx_channel_number_msk_e
 */
typedef enum
{
    APOLLO_TX_CHANNEL_CH_A0 = 0x00, /*< code: 0x00 Channel A0 */
    APOLLO_TX_CHANNEL_CH_A1 = 0x01, /*< code: 0x01 Channel A1 */
    APOLLO_TX_CHANNEL_CH_A2 = 0x02, /*< code: 0x02 Channel A2 - 8T/8R Only */
    APOLLO_TX_CHANNEL_CH_A3 = 0x03, /*< code: 0x03 Channel A3 - 8T/8R Only */
    APOLLO_TX_CHANNEL_CH_B0 = 0x04, /*< code: 0x04 Channel B0 */
    APOLLO_TX_CHANNEL_CH_B1 = 0x05, /*< code: 0x05 Channel B1 */
    APOLLO_TX_CHANNEL_CH_B2 = 0x06, /*< code: 0x06 Channel B2 - 8T/8R Only */
    APOLLO_TX_CHANNEL_CH_B3 = 0x07  /*< code: 0x07 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_tx_channel_numbers_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_serdes_pack_msk_e
 */
typedef enum
{
    APOLLO_SERDES_PACK_NUM_PACK_0_EAST = 0x00, /*< code: 0x00 SERDES pack 0 east */
    APOLLO_SERDES_PACK_NUM_PACK_1_WEST = 0x01  /*< code: 0x01 SERDES pack 1 west */
} adi_apollo_mailbox_apollo_serdes_pack_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_linearx_chan_msk_e
 */
typedef enum
{
    APOLLO_LINEARX_CHAN_NUM_CH_A0 = 0x00, /*< code: 0x00 Channel A0 */
    APOLLO_LINEARX_CHAN_NUM_CH_A1 = 0x01, /*< code: 0x01 Channel A1 */
    APOLLO_LINEARX_CHAN_NUM_CH_A2 = 0x02, /*< code: 0x02 Channel A2 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_CH_A3 = 0x03, /*< code: 0x03 Channel A3 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_CH_B0 = 0x04, /*< code: 0x04 Channel B0 */
    APOLLO_LINEARX_CHAN_NUM_CH_B1 = 0x05, /*< code: 0x05 Channel B1 */
    APOLLO_LINEARX_CHAN_NUM_CH_B2 = 0x06, /*< code: 0x06 Channel B2 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_CH_B3 = 0x07  /*< code: 0x07 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_linearx_chan_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_mcs_channel_number_msk_e
 */
typedef enum
{
    APOLLO_MCS_CHANNEL_CH_A0 = 0x00, /*< code: 0x00 Channel A0 */
    APOLLO_MCS_CHANNEL_CH_A1 = 0x01, /*< code: 0x01 Channel A1 */
    APOLLO_MCS_CHANNEL_CH_A2 = 0x02, /*< code: 0x02 Channel A2 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_CH_A3 = 0x03, /*< code: 0x03 Channel A3 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_CH_B0 = 0x04, /*< code: 0x04 Channel B0 */
    APOLLO_MCS_CHANNEL_CH_B1 = 0x05, /*< code: 0x05 Channel B1 */
    APOLLO_MCS_CHANNEL_CH_B2 = 0x06, /*< code: 0x06 Channel B2 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_CH_B3 = 0x07  /*< code: 0x07 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_mcs_channel_numbers_e;

typedef enum
{
    CAL_STATUS_COMMON     = 0x00, /*< code: 0x00 Common calibration status */
    CAL_STATUS_SPECIFIC   = 0x01, /*< code: 0x01 Calibration-specific status */
    CAL_STATUS_PRIVATE    = 0x02, /*< code: 0x02 Private calibration-specific status */
    CAL_STATUS_NUM_STATUS = 0x03  /*< code: 0x03 Number of status types */
} adi_apollo_mailbox_cal_status_type_e;

typedef enum
{
    APOLLO_CPU_OBJID_IC_START               = 0x00, /*< code: 0x00 Start of Initial Calibration OBJID */
    APOLLO_CPU_OBJID_IC_ADC_RX              = 0x00, /*< code: 0x00 ADC Rx */
    APOLLO_CPU_OBJID_IC_DAC_TX              = 0x01, /*< code: 0x01 DAC Tx */
    APOLLO_CPU_OBJID_IC_SERDES_RX           = 0x02, /*< code: 0x02 SERDES Rx Initial Cal */
    APOLLO_CPU_OBJID_IC_SERDES_TX           = 0x03, /*< code: 0x03 SERDES Tx Initial Cal */
    APOLLO_CPU_OBJID_TC_NUM_CALS            = 0x03, /*< code: 0x03 number of tracking cals */
    APOLLO_CPU_OBJID_IC_MCS                 = 0x04, /*< code: 0x04 MCS Calibration */
    APOLLO_CPU_OBJID_IC_LINEARX_RX          = 0x05, /*< code: 0x05 LINEARX Rx Initial Cal */
    APOLLO_CPU_OBJID_IC_TEST_1              = 0x06, /*< code: 0x06 Test cal 1, Initial Cal Framework test */
    APOLLO_CPU_OBJID_IC_END                 = 0x06, /*< code: 0x06 End of Initial Calibration OBJID */
    APOLLO_CPU_OBJID_IC_NUM_CALS            = 0x07, /*< code: 0x07 number of initial cals */
    APOLLO_CPU_OBJID_TC_START               = 0x30, /*< code: 0x30 Start of Tracking Calibration OBJID */
    APOLLO_CPU_OBJID_TC_SERDES_RX           = 0x30, /*< code: 0x30 SERDES Rx Tracking Cal */
    APOLLO_CPU_OBJID_TC_INTERNAL_START      = 0x31, /*< code: 0x31 Start of Internal Tracking Calibration OBJID */
    APOLLO_CPU_OBJID_TC_ADC_RX              = 0x31, /*< code: 0x31 ADC Rx */
    APOLLO_CPU_OBJID_TC_MCS                 = 0x32, /*< code: 0x32 MCS Tracking Cal */
    APOLLO_CPU_OBJID_TC_END                 = 0x32, /*< code: 0x32 End of Tracking Calibration OBJID */
    APOLLO_CPU_OBJID_CFG_DEVICE_PROFILE     = 0x80, /*< code: 0x80 Configuration profile */
    APOLLO_CPU_OBJID_CFG_RADIO_EVENT        = 0x81, /*< code: 0x81 Radio events module */
    APOLLO_CPU_OBJID_CFG_INITIAL_CALS       = 0x82, /*< code: 0x82 Initial Calibration framework configuration */
    APOLLO_CPU_OBJID_CFG_CAL_SCHEDULER      = 0x83, /*< code: 0x83 Calibration scheduler */
    APOLLO_CPU_OBJID_CFG_HM                 = 0x84, /*< code: 0x84 HM Timer Control */
    APOLLO_CPU_OBJID_CFG_PARITY_ERROR_CHECK = 0x85, /*< code: 0x85 Configurable objects for memory refresh */
    APOLLO_CPU_OBJID_CFG_SYSTEM_CONFIG      = 0x86, /*< code: 0x86 System configuration */
    APOLLO_CPU_OBJID_CFG_TRACKING_CALS      = 0x87, /*< code: 0x87 Set tracking cal framework configuration */
    APOLLO_CPU_OBJID_CFG_TELEM              = 0x8c, /*< code: 0x8c Configure the telemetry logging */
    APOLLO_CPU_OBJID_CFG_RESERVED3          = 0x8d, /*< code: 0x8d reserved */
    APOLLO_CPU_OBJID_CFG_RESERVED4          = 0x8e, /*< code: 0x8e reserved */
    APOLLO_CPU_OBJID_CFG_RESERVED5          = 0x8f, /*< code: 0x8f reserved */
    APOLLO_CPU_OBJID_DRV_NCO                = 0xb0, /*< code: 0xb0 NCO */
    APOLLO_CPU_OBJID_DRV_STREAM             = 0xb1, /*< code: 0xb1 Stream  */
    APOLLO_CPU_OBJID_DRV_FSC                = 0xb2, /*< code: 0xb2 FSC  */
    APOLLO_CPU_OBJID_DRV_MASTER_BIAS        = 0xb3, /*< code: 0xb3 Master Bias */
    APOLLO_CPU_OBJID_DRV_LDO                = 0xb4, /*< code: 0xb4 LDO */
    APOLLO_CPU_OBJID_DRV_DWT                = 0xb5, /*< code: 0xb5 DWT */
    APOLLO_CPU_OBJID_DRV_TEMP               = 0xb6, /*< code: 0xb6 TEMP */
    APOLLO_CPU_OBJID_DRV_PLL                = 0xb7, /*< code: 0xb7 PLL */
    APOLLO_CPU_OBJID_DRV_JESD               = 0xb8, /*< code: 0xb8 JESD */
    APOLLO_CPU_OBJID_DRV_UART               = 0xb9, /*< code: 0xb9 UART */
    APOLLO_CPU_OBJID_DRV_TXATTEN            = 0xba, /*< code: 0xba TXATTEN  */
    APOLLO_CPU_OBJID_DRV_RX_CFG             = 0xbb, /*< code: 0xbb Rx Config */
    APOLLO_CPU_OBJID_DRV_GPIO               = 0xbc, /*< code: 0xbc GPIO */
    APOLLO_CPU_OBJID_DRV_HSCI               = 0xbd, /*< code: 0xbd HSCI */
    APOLLO_CPU_OBJID_DRV_SYSCLK             = 0xbe, /*< code: 0xbe SYSCLK */
    APOLLO_CPU_OBJID_DRV_TE                 = 0xbf, /*< code: 0xbf Tiny Enclave */
    APOLLO_CPU_OBJID_HAL_RADIO              = 0xc0, /*< code: 0xc0 HAL_RADIO */
    APOLLO_CPU_OBJID_DRV_DUMMY              = 0xf0, /*< code: 0xf0 Dummy driver object */
    APOLLO_CPU_OBJID_SYSTEM_START           = 0xff, /*< code: 0xff Start of System OBJID */
    APOLLO_CPU_OBJID_SYSTEM_ERROR           = 0xff, /*< code: 0xff System error */
    APOLLO_CPU_OBJID_SYSTEM_END             = 0xff  /*< code: 0xff End of System OBJID */
} adi_apollo_mailbox_sys_cal_object_id_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_channel_num_msk_e
 */
typedef enum
{
    APOLLO_CHANNEL_NUM_CH_A0 = 0x00, /*< code: 0x00 Channel A0 */
    APOLLO_CHANNEL_NUM_CH_A1 = 0x01, /*< code: 0x01 Channel A1 */
    APOLLO_CHANNEL_NUM_CH_A2 = 0x02, /*< code: 0x02 Channel A2 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_CH_A3 = 0x03, /*< code: 0x03 Channel A3 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_CH_B0 = 0x04, /*< code: 0x04 Channel B0 */
    APOLLO_CHANNEL_NUM_CH_B1 = 0x05, /*< code: 0x05 Channel B1 */
    APOLLO_CHANNEL_NUM_CH_B2 = 0x06, /*< code: 0x06 Channel B2 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_CH_B3 = 0x07  /*< code: 0x07 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_channel_num_e;

typedef enum
{
    SYS_STATUS_PUBLIC  = 0x00, /*< code: 0x00 Public System status */
    SYS_STATUS_PRIVATE = 0x01  /*< code: 0x01 Private System status */
} adi_apollo_mailbox_sys_status_type_e;

/**
 * \see also \ref: adi_apollo_mailbox_temp_sensor_mask_e
 */
typedef enum
{
    ADI_APOLLO_DEVTEMP_CLKPLL          = 0x00, /*< code: 0x00 Clk PLL temperature sensor with ADC */
    ADI_APOLLO_DEVTEMP_SERDESPLL       = 0x01, /*< code: 0x01 SERDES PLL temperature sensor with ADC */
    ADI_APOLLO_DEVTEMP_MPU_A           = 0x02, /*< code: 0x02 ana_mpu_top_A temperature sensor with shared ADC */
    ADI_APOLLO_DEVTEMP_MPU_B           = 0x03, /*< code: 0x03 ana_mpu_top_B temperature sensor with shared ADC */
    ADI_APOLLO_DEVTEMP_LPU_VENUS_A     = 0x04, /*< code: 0x04 lpu_venusdual_r0_A temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_LPU_CK_CORNER_A = 0x05, /*< code: 0x05 ck_dist_corner_A temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_LPU_VENUS_B     = 0x06, /*< code: 0x06 lpu_venusdual_r0_B temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_LPU_CK_CORNER_B = 0x07, /*< code: 0x07 ck_dist_corner_B temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_LPU_CK_CENTER   = 0x08, /*< code: 0x08 ck_dist_center temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_MAX_SENSORS     = 0x09  /*< code: 0x09 Max number of temperature sensors */
} adi_apollo_mailbox_temp_sensor_e;

typedef enum
{
    CTRL_CMD_GET_SW_VERSION = 0x00, /*< code: 0x00 Get software version */
    CTRL_CMD_INIT           = 0x01, /*< code: 0x01 Initialization */
    CTRL_CMD_SET_FSM_CMD    = 0x02, /*< code: 0x02 Set FSM command */
    CTRL_CMD_GET_FSM_STATE  = 0x03, /*< code: 0x03 Get FSM state */
    CTRL_CMD_GET_DATA_SIZES = 0x04, /*< code: 0x04 Get data sizes */
    CTRL_CMD_GET_DATA_ADDRS = 0x05, /*< code: 0x05 Get data addresses */
    CTRL_CMD_RUN            = 0x06, /*< code: 0x06 Run command */
    CTRL_CMD_PARAM_SET      = 0x07, /*< code: 0x07 Set parameters command */
    CTRL_CMD_PARAM_GET      = 0x08  /*< code: 0x08 Get parameters command */
} adi_apollo_mailbox_ctrl_cmd_e;

typedef enum
{
    APOLLO_HAL_CLI_LOGLVL_ERROR      = 0x01, /*< code: 0x01 Error message */
    APOLLO_HAL_CLI_LOGLVL_WARNING    = 0x02, /*< code: 0x02 Warning message */
    APOLLO_HAL_CLI_LOGLVL_INFO       = 0x03, /*< code: 0x03 Informational message, least verbose */
    APOLLO_HAL_CLI_LOGLVL_INFO_2     = 0x04, /*< code: 0x04 Informational message, most verbose */
    APOLLO_HAL_CLI_LOGLVL_NUM_LEVELS = 0x05  /*< code: 0x05 Number of log levels */
} adi_apollo_mailbox_hal_cli_log_level_e;

typedef enum
{
    APOLLO_MCS_HAL_CLI_CPU_ID_NONE = 0x00, /*< code: 0x00 No CPUs */
    APOLLO_MCS_HAL_CLI_CPU_ID_0    = 0x01, /*< code: 0x01 CPU 0 (Primary CPU) */
    APOLLO_MCS_HAL_CLI_CPU_ID_1    = 0x02, /*< code: 0x02 CPU 1 */
    APOLLO_MCS_HAL_CLI_CPU_ID_ALL  = 0x03  /*< code: 0x03 All CPUs */
} adi_apollo_mailbox_hal_cli_cpu_id_e;

typedef enum
{
    APOLLO_SERDES_LANE_NUM_1  = 0x00, /*< code: 0x00 serdes lane number 1 */
    APOLLO_SERDES_LANE_NUM_2  = 0x01, /*< code: 0x01 serdes lane number 2 */
    APOLLO_SERDES_LANE_NUM_3  = 0x02, /*< code: 0x02 serdes lane number 3 */
    APOLLO_SERDES_LANE_NUM_4  = 0x03, /*< code: 0x03 serdes lane number 4 */
    APOLLO_SERDES_LANE_NUM_5  = 0x04, /*< code: 0x04 serdes lane number 5 */
    APOLLO_SERDES_LANE_NUM_6  = 0x05, /*< code: 0x05 serdes lane number 6 */
    APOLLO_SERDES_LANE_NUM_7  = 0x06, /*< code: 0x06 serdes lane number 7 */
    APOLLO_SERDES_LANE_NUM_8  = 0x07, /*< code: 0x07 serdes lane number 8 */
    APOLLO_SERDES_LANE_NUM_9  = 0x08, /*< code: 0x08 serdes lane number 9 */
    APOLLO_SERDES_LANE_NUM_10 = 0x09, /*< code: 0x09 serdes lane number 10 */
    APOLLO_SERDES_LANE_NUM_11 = 0x0a, /*< code: 0x0a serdes lane number 11 */
    APOLLO_SERDES_LANE_NUM_12 = 0x0b, /*< code: 0x0b serdes lane number 12 */
    APOLLO_SERDES_LANE_NUM_13 = 0x0c, /*< code: 0x0c serdes lane number 13 */
    APOLLO_SERDES_LANE_NUM_14 = 0x0d, /*< code: 0x0d serdes lane number 14 */
    APOLLO_SERDES_LANE_NUM_15 = 0x0e, /*< code: 0x0e serdes lane number 15 */
    APOLLO_SERDES_LANE_NUM_16 = 0x0f, /*< code: 0x0f serdes lane number 16 */
    APOLLO_SERDES_LANE_NUM_17 = 0x10, /*< code: 0x10 serdes lane number 17 */
    APOLLO_SERDES_LANE_NUM_18 = 0x11, /*< code: 0x11 serdes lane number 18 */
    APOLLO_SERDES_LANE_NUM_19 = 0x12, /*< code: 0x12 serdes lane number 19 */
    APOLLO_SERDES_LANE_NUM_20 = 0x13, /*< code: 0x13 serdes lane number 20 */
    APOLLO_SERDES_LANE_NUM_21 = 0x14, /*< code: 0x14 serdes lane number 21 */
    APOLLO_SERDES_LANE_NUM_22 = 0x15, /*< code: 0x15 serdes lane number 22 */
    APOLLO_SERDES_LANE_NUM_23 = 0x16, /*< code: 0x16 serdes lane number 23 */
    APOLLO_SERDES_LANE_NUM_24 = 0x17  /*< code: 0x17 serdes lane number 24 */
} adi_apollo_mailbox_serdes_lane_num_e;

typedef enum
{
    GPIO_SIGNAL_SWBKPT_BKPT_HIT         = 0x00, /*< code: 0x00 SW breakpoint was hit signal */
    GPIO_SIGNAL_SWBKPT_RESUME_FROM_BKPT = 0x01  /*< code: 0x01 Resume from SW breakpoint signal */
} adi_apollo_mailbox_gpio_signal_e;

typedef enum
{
    APOLLO_GPIO_PIN_00 = 0x00, /*< code: 0x00 GPIO Pin 0 */
    APOLLO_GPIO_PIN_01 = 0x01, /*< code: 0x01 GPIO Pin 1 */
    APOLLO_GPIO_PIN_02 = 0x02, /*< code: 0x02 GPIO Pin 2 */
    APOLLO_GPIO_PIN_03 = 0x03, /*< code: 0x03 GPIO Pin 3 */
    APOLLO_GPIO_PIN_04 = 0x04, /*< code: 0x04 GPIO Pin 4 */
    APOLLO_GPIO_PIN_05 = 0x05, /*< code: 0x05 GPIO Pin 5 */
    APOLLO_GPIO_PIN_06 = 0x06, /*< code: 0x06 GPIO Pin 6 */
    APOLLO_GPIO_PIN_07 = 0x07, /*< code: 0x07 GPIO Pin 7 */
    APOLLO_GPIO_PIN_08 = 0x08, /*< code: 0x08 GPIO Pin 8 */
    APOLLO_GPIO_PIN_09 = 0x09, /*< code: 0x09 GPIO Pin 9 */
    APOLLO_GPIO_PIN_10 = 0x0a, /*< code: 0x0a GPIO Pin 10 */
    APOLLO_GPIO_PIN_11 = 0x0b, /*< code: 0x0b GPIO Pin 11 */
    APOLLO_GPIO_PIN_12 = 0x0c, /*< code: 0x0c GPIO Pin 12 */
    APOLLO_GPIO_PIN_13 = 0x0d, /*< code: 0x0d GPIO Pin 13 */
    APOLLO_GPIO_PIN_14 = 0x0e, /*< code: 0x0e GPIO Pin 14 */
    APOLLO_GPIO_PIN_15 = 0x0f, /*< code: 0x0f GPIO Pin 15 */
    APOLLO_GPIO_PIN_16 = 0x10, /*< code: 0x10 GPIO Pin 16 */
    APOLLO_GPIO_PIN_17 = 0x11, /*< code: 0x11 GPIO Pin 17 */
    APOLLO_GPIO_PIN_18 = 0x12, /*< code: 0x12 GPIO Pin 18 */
    APOLLO_GPIO_PIN_19 = 0x13, /*< code: 0x13 GPIO Pin 19 */
    APOLLO_GPIO_PIN_20 = 0x14, /*< code: 0x14 GPIO Pin 20 */
    APOLLO_GPIO_PIN_21 = 0x15, /*< code: 0x15 GPIO Pin 21 */
    APOLLO_GPIO_PIN_22 = 0x16, /*< code: 0x16 GPIO Pin 22 */
    APOLLO_GPIO_PIN_23 = 0x17  /*< code: 0x17 GPIO Pin 23 */
} adi_apollo_mailbox_gpio_pin_selection_e;

typedef enum
{
    GPIO_PIN_POLARITY_NORMAL   = 0x00, /*< code: 0x00 Normal pin polarity */
    GPIO_PIN_POLARITY_INVERTED = 0x01  /*< code: 0x01 Inverted pin polarity */
} adi_apollo_mailbox_gpio_polarity_e;

typedef enum
{
    GPIO_PIN_DISABLE = 0x00, /*< code: 0x00 Disable pin for a given signal */
    GPIO_PIN_ENABLE  = 0x01  /*< code: 0x01 Enable pin for a given signal */
} adi_apollo_mailbox_gpio_pin_ctrl_e;

typedef enum
{
    APOLLO_SYSCLK_ALL_WITH_RINGOSC_SWITCH = 0x00, /*< code: 0x00 All Transmission line segments including Clock Receivers */
    APOLLO_SYSCLK_USE_DAC_SPECIAL_SENSOR  = 0x01, /*< code: 0x01 DAC special sensor based fine tune */
    APOLLO_SYSCLK_START_BG_CAL            = 0x02, /*< code: 0x02 Start background calibration */
    APOLLO_SYSCLK_STOP_BG_CAL             = 0x03, /*< code: 0x03 Stop background calibration */
    APOLLO_SYSCLK_RESUME_BG_CAL           = 0x04  /*< code: 0x04 Resume background calibration */
} adi_apollo_mailbox_clk_path_segment_e;

typedef enum
{
    APOLLO_PLL_CLKGEN_PLL = 0x00, /*< code: 0x00 Clock Gen PLL */
    APOLLO_PLL_SERDES_PLL = 0x01  /*< code: 0x01 Serdes PLL */
} adi_apollo_mailbox_pll_sel_name_e;

typedef enum
{
    CHALLENGE_TYPE_CHALLENGE_GET_VALUE           = 0x00, /*< code: 0x00 Get challenge value */
    CHALLENGE_TYPE_CHALLENGE_SECURE_DEBUG_ACCESS = 0x01, /*< code: 0x01 Secure debug access */
    CHALLENGE_TYPE_ADI_ENCLAVE_CHAL_SET_CUST_RMA = 0x02, /*< code: 0x02 Set customer RMA */
    CHALLENGE_TYPE_ADI_ENCLAVE_CHAL_SET_ADI_RMA  = 0x03  /*< code: 0x03 Set ADI RMA */
} adi_apollo_mailbox_challenge_type_e;

typedef enum
{
    APOLLO_MCS_BSYNC_ALIGN      = 0x00, /*< code: 0x00 Align */
    APOLLO_MCS_BSYNC_OUTPUT_EN  = 0x01, /*< code: 0x01 Output enable and loopback measurement */
    APOLLO_MCS_BSYNC_OUTPUT_DIS = 0x02, /*< code: 0x02 Output disable */
    APOLLO_MCS_BSYNC_MODE_ERROR = 0x03  /*< code: 0x03 Error mode */
} adi_apollo_mailbox_mcs_bsync_mode_e;

typedef enum
{
    APOLLO_ADC_PREP_FAST_MODE_SWITCH   = 0x00, /*< code: 0x00 Prepare ADC slice mode fast switch */
    APOLLO_ADC_EXEC_FAST_MODE_SWITCH   = 0x01, /*< code: 0x01 Execute ADC slice mode fast switch */
    APOLLO_ADC_RESUME_FAST_MODE_SWITCH = 0x02  /*< code: 0x02 Resume ADC slice mode fast switch */
} adi_apollo_mailbox_adc_slice_mode_fast_switch_action_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_init_calibrations_e
 */
typedef enum
{
    APOLLO_INIT_CAL_MSK_IC_ADC_RX     = 0x01, /*< code: 0x01 ADC Rx */
    APOLLO_INIT_CAL_MSK_IC_DAC_TX     = 0x02, /*< code: 0x02 DAC Tx */
    APOLLO_INIT_CAL_MSK_IC_SERDES_RX  = 0x04, /*< code: 0x04 SERDES Rx Initial Cal */
    APOLLO_INIT_CAL_MSK_IC_SERDES_TX  = 0x08, /*< code: 0x08 SERDES Tx Initial Cal */
    APOLLO_INIT_CAL_MSK_IC_MCS        = 0x10, /*< code: 0x10 MCS Calibration */
    APOLLO_INIT_CAL_MSK_IC_LINEARX_RX = 0x20, /*< code: 0x20 LINEARX Rx Initial Cal */
    APOLLO_INIT_CAL_MSK_IC_TEST_1     = 0x40  /*< code: 0x40 Test cal 1, Initial Cal Framework test */
} adi_apollo_mailbox_apollo_init_calibrations_msk_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_rx_channel_numbers_e
 */
typedef enum
{
    APOLLO_RX_CHANNEL_MSK_CH_A0 = 0x01, /*< code: 0x01 Channel A0 */
    APOLLO_RX_CHANNEL_MSK_CH_A1 = 0x02, /*< code: 0x02 Channel A1 */
    APOLLO_RX_CHANNEL_MSK_CH_A2 = 0x04, /*< code: 0x04 Channel A2 - 8T/8R Only */
    APOLLO_RX_CHANNEL_MSK_CH_A3 = 0x08, /*< code: 0x08 Channel A3 - 8T/8R Only */
    APOLLO_RX_CHANNEL_MSK_CH_B0 = 0x10, /*< code: 0x10 Channel B0 */
    APOLLO_RX_CHANNEL_MSK_CH_B1 = 0x20, /*< code: 0x20 Channel B1 */
    APOLLO_RX_CHANNEL_MSK_CH_B2 = 0x40, /*< code: 0x40 Channel B2 - 8T/8R Only */
    APOLLO_RX_CHANNEL_MSK_CH_B3 = 0x80  /*< code: 0x80 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_rx_channel_number_msk_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_tx_channel_numbers_e
 */
typedef enum
{
    APOLLO_TX_CHANNEL_MSK_CH_A0 = 0x01, /*< code: 0x01 Channel A0 */
    APOLLO_TX_CHANNEL_MSK_CH_A1 = 0x02, /*< code: 0x02 Channel A1 */
    APOLLO_TX_CHANNEL_MSK_CH_A2 = 0x04, /*< code: 0x04 Channel A2 - 8T/8R Only */
    APOLLO_TX_CHANNEL_MSK_CH_A3 = 0x08, /*< code: 0x08 Channel A3 - 8T/8R Only */
    APOLLO_TX_CHANNEL_MSK_CH_B0 = 0x10, /*< code: 0x10 Channel B0 */
    APOLLO_TX_CHANNEL_MSK_CH_B1 = 0x20, /*< code: 0x20 Channel B1 */
    APOLLO_TX_CHANNEL_MSK_CH_B2 = 0x40, /*< code: 0x40 Channel B2 - 8T/8R Only */
    APOLLO_TX_CHANNEL_MSK_CH_B3 = 0x80  /*< code: 0x80 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_tx_channel_number_msk_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_serdes_pack_e
 */
typedef enum
{
    APOLLO_SERDES_PACK_NUM_MSK_PACK_0_EAST = 0x01, /*< code: 0x01 SERDES pack 0 east */
    APOLLO_SERDES_PACK_NUM_MSK_PACK_1_WEST = 0x02  /*< code: 0x02 SERDES pack 1 west */
} adi_apollo_mailbox_apollo_serdes_pack_msk_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_linearx_chan_e
 */
typedef enum
{
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_A0 = 0x01, /*< code: 0x01 Channel A0 */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_A1 = 0x02, /*< code: 0x02 Channel A1 */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_A2 = 0x04, /*< code: 0x04 Channel A2 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_A3 = 0x08, /*< code: 0x08 Channel A3 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_B0 = 0x10, /*< code: 0x10 Channel B0 */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_B1 = 0x20, /*< code: 0x20 Channel B1 */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_B2 = 0x40, /*< code: 0x40 Channel B2 - 8T/8R Only */
    APOLLO_LINEARX_CHAN_NUM_MSK_CH_B3 = 0x80  /*< code: 0x80 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_linearx_chan_msk_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_mcs_channel_numbers_e
 */
typedef enum
{
    APOLLO_MCS_CHANNEL_MSK_CH_A0 = 0x01, /*< code: 0x01 Channel A0 */
    APOLLO_MCS_CHANNEL_MSK_CH_A1 = 0x02, /*< code: 0x02 Channel A1 */
    APOLLO_MCS_CHANNEL_MSK_CH_A2 = 0x04, /*< code: 0x04 Channel A2 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_MSK_CH_A3 = 0x08, /*< code: 0x08 Channel A3 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_MSK_CH_B0 = 0x10, /*< code: 0x10 Channel B0 */
    APOLLO_MCS_CHANNEL_MSK_CH_B1 = 0x20, /*< code: 0x20 Channel B1 */
    APOLLO_MCS_CHANNEL_MSK_CH_B2 = 0x40, /*< code: 0x40 Channel B2 - 8T/8R Only */
    APOLLO_MCS_CHANNEL_MSK_CH_B3 = 0x80  /*< code: 0x80 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_mcs_channel_number_msk_e;

/**
 * Calibration state
*/
typedef enum
{
    APOLLO_CALFRMWRK_STATE_SUSPENDED = 0x01, /*< code: 0x01 Cal's timer is not running */
    APOLLO_CALFRMWRK_STATE_RESUMED   = 0x02, /*< code: 0x02 Cal's timer is running */
    APOLLO_CALFRMWRK_STATE_INACTIVE  = 0x04, /*< code: 0x04 Cal's Main function is not executing */
    APOLLO_CALFRMWRK_STATE_RUNNING   = 0x08, /*< code: 0x08 Cal's Main function is executing */
    APOLLO_CALFRMWRK_STATE_ENABLED   = 0x10, /*< code: 0x10 Cal is enabled back from the host */
    APOLLO_CALFRMWRK_STATE_DISABLED  = 0x20, /*< code: 0x20 Cal is disabled from the host */
    APOLLO_CALFRMWRK_STATE_ERROR     = 0x40  /*< code: 0x40 Cal is errored out */
} adi_apollo_mailbox_calfrmwrk_state_e;

/**
 * \see also \ref: adi_apollo_mailbox_temp_sensor_e
 */
typedef enum
{
    ADI_APOLLO_DEVTEMP_MASK_CLKPLL          = 0x01, /*< code: 0x01 Clk PLL temperature sensor with ADC */
    ADI_APOLLO_DEVTEMP_MASK_SERDESPLL       = 0x02, /*< code: 0x02 SERDES PLL temperature sensor with ADC */
    ADI_APOLLO_DEVTEMP_MASK_MPU_A           = 0x04, /*< code: 0x04 ana_mpu_top_A temperature sensor with shared ADC */
    ADI_APOLLO_DEVTEMP_MASK_MPU_B           = 0x08, /*< code: 0x08 ana_mpu_top_B temperature sensor with shared ADC */
    ADI_APOLLO_DEVTEMP_MASK_LPU_VENUS_A     = 0x10, /*< code: 0x10 lpu_venusdual_r0_A temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_MASK_LPU_CK_CORNER_A = 0x20, /*< code: 0x20 ck_dist_corner_A temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_MASK_LPU_VENUS_B     = 0x40, /*< code: 0x40 lpu_venusdual_r0_B temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_MASK_LPU_CK_CORNER_B = 0x80, /*< code: 0x80 ck_dist_corner_B temperature sensor stub without ADC */
    ADI_APOLLO_DEVTEMP_MASK_LPU_CK_CENTER   = 0x100  /*< code: 0x100 ck_dist_center temperature sensor stub without ADC */
} adi_apollo_mailbox_temp_sensor_mask_e;

/**
 * \see also \ref: adi_apollo_mailbox_apollo_channel_num_e
 */
typedef enum
{
    APOLLO_CHANNEL_NUM_MSK_CH_A0 = 0x01, /*< code: 0x01 Channel A0 */
    APOLLO_CHANNEL_NUM_MSK_CH_A1 = 0x02, /*< code: 0x02 Channel A1 */
    APOLLO_CHANNEL_NUM_MSK_CH_A2 = 0x04, /*< code: 0x04 Channel A2 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_MSK_CH_A3 = 0x08, /*< code: 0x08 Channel A3 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_MSK_CH_B0 = 0x10, /*< code: 0x10 Channel B0 */
    APOLLO_CHANNEL_NUM_MSK_CH_B1 = 0x20, /*< code: 0x20 Channel B1 */
    APOLLO_CHANNEL_NUM_MSK_CH_B2 = 0x40, /*< code: 0x40 Channel B2 - 8T/8R Only */
    APOLLO_CHANNEL_NUM_MSK_CH_B3 = 0x80  /*< code: 0x80 Channel B3 - 8T/8R Only */
} adi_apollo_mailbox_apollo_channel_num_msk_e;

/*****************************************************************************
 * Sub structure forward declarations
 *****************************************************************************/
struct adi_apollo_mailbox_tracking_cal_enable_masks;
struct adi_apollo_mailbox_tracking_cal_state;
struct adi_apollo_mailbox_temp_data;
struct adi_apollo_mailbox_object_id_filter;

/*****************************************************************************
 * Sub structures
 *****************************************************************************/
/**
 * \brief data structure to hold tracking calibration enable masks
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_tracking_cal_enable_masks
{
    uint32_t serdes_rx_enable_masks;    /*!< which SerDes Rx tracking calibrations are enabled per pack. - see \ref adi_apollo_mailbox_apollo_serdes_pack_msk_e */
    uint32_t adc_rx_enable_masks;       /*!< which ADC Rx tracking calibrations are enabled per channel. - see \ref adi_apollo_mailbox_apollo_rx_channel_number_msk_e */
    uint32_t mcs_tc_enable_mask;        /*!< If the MCS tracking cal is enabled or not - see \ref adi_apollo_mailbox_apollo_mcs_channel_number_msk_e */
} adi_apollo_mailbox_tracking_cal_enable_masks_t;
)

/**
 * \brief hold tracking calibration state information
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_tracking_cal_state
{
    uint32_t serdes_rx_cal_error[2];    /*!< SerDes Rx tracking calibration error per pack */
    uint32_t serdes_rx_cal_state[2];    /*!< SerDes Rx tracking calibration state per pack - see \ref adi_apollo_mailbox_calfrmwrk_state_e for each element */
    uint32_t adc_rx_cal_error[8];       /*!< ADC Rx tracking calibration error per channel */
    uint32_t adc_rx_cal_state[8];       /*!< ADC Rx tracking calibration state per channel - see \ref adi_apollo_mailbox_calfrmwrk_state_e for each element */
    uint32_t mcs_cal_error[1];          /*!< MCS tracking calibration error per channel */
    uint32_t mcs_cal_state[1];          /*!< MCS tracking calibration state per channel - see \ref adi_apollo_mailbox_calfrmwrk_state_e for each element */
} adi_apollo_mailbox_tracking_cal_state_t;
)

/**
 * \brief Temperature data returned by CPU
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_temp_data
{
    int16_t temp_degrees_celsius[9];     /*!< Temperature readings from all temperature sensors */
    int16_t temp_degrees_celsius_avg;    /*!< Average temperature reading of temperature sensors specified in avgMask */
    uint16_t avg_mask;                   /*!< Bitmask indicating which temperature sensors are averaged in tempDegreesCelciusAvg - see \ref adi_apollo_mailbox_temp_sensor_mask_e */
    int16_t max_temp_degrees_celsius;    /*!< Max temperature reading of temperature sensors specified in avgMask */
    int16_t min_temp_degrees_celsius;    /*!< Min temperature reading of temperature sensors specified in avgMask */
} adi_apollo_mailbox_temp_data_t;
)

/**
 * \brief log object ID filter settings
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_object_id_filter
{
    uint32_t sys_cal_object_id;         /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint8_t object_id_filter_enable;    /*!< Filter enable/disable */
} adi_apollo_mailbox_object_id_filter_t;
)

/*****************************************************************************
 * Command structures
 *****************************************************************************/

/**
 * \brief \ref ADI_APOLLO_MAILBOX_PING Cmd structure.
 * \details Ping the CPU. See also \ref adi_apollo_mailbox_resp_ping
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_ping
{
    uint32_t echo_data;    /*!< Data to be echoed back by CPU */
} adi_apollo_mailbox_cmd_ping_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_INIT Cmd structure.
 * \details Run initial calibrations. See also \ref adi_apollo_mailbox_resp_run_init
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_run_init
{
    uint32_t cal_mask;               /*!< Mask of adi_apollo_InitCalibrations to run on init - see \ref adi_apollo_mailbox_apollo_init_calibrations_msk_e */
    uint32_t rx_channel_mask;        /*!< Mask to hold Rx channels to run on init - see \ref adi_apollo_mailbox_apollo_rx_channel_number_msk_e */
    uint32_t tx_channel_mask;        /*!< Mask to hold Tx channels to run on init - see \ref adi_apollo_mailbox_apollo_tx_channel_number_msk_e */
    uint32_t serdes_rx_pack_mask;    /*!< Mask to hold SerDes Rx packs to run on init - see \ref adi_apollo_mailbox_apollo_serdes_pack_msk_e */
    uint32_t serdes_tx_pack_mask;    /*!< Mask to hold SerDes Tx packs to run on init - see \ref adi_apollo_mailbox_apollo_serdes_pack_msk_e */
    uint32_t linearx_chan_mask;      /*!< Mask to hold linearx chan to run on init - see \ref adi_apollo_mailbox_apollo_linearx_chan_msk_e */
} adi_apollo_mailbox_cmd_run_init_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ENABLED_TRACKING_CALS Cmd structure.
 * \details Set the set of enabled tracking cals. See also \ref adi_apollo_mailbox_resp_set_enabled_tracking_cals
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_enabled_tracking_cals
{
    uint32_t serdes_rx_pack_mask;    /*!< which Rx packs to apply the SerDes Rx calibration to - see \ref adi_apollo_mailbox_apollo_serdes_pack_msk_e */
    uint32_t adc_rx_channel_mask;    /*!< which Rx channels to apply the ADC Rx calibration to - see \ref adi_apollo_mailbox_apollo_rx_channel_number_msk_e */
    uint32_t mcs_tc_mask;            /*!< To enable or not the MCS tracking cal - see \ref adi_apollo_mailbox_apollo_mcs_channel_number_msk_e */
    uint8_t enable_disable;          /*!< tracking cal enable/disable */
} adi_apollo_mailbox_cmd_set_enabled_tracking_cals_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_CAL_STATUS Cmd structure.
 * \details Get calibration status information. See also \ref adi_apollo_mailbox_resp_get_cal_status
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_get_cal_status
{
    uint8_t cal_status_type;       /*!< Calibration status type to be retrieved - see \ref adi_apollo_mailbox_cal_status_type_e */
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint32_t channel_num;          /*!< Channel number (0 for channel 1, 1 for channel 2, etc.) - see \ref adi_apollo_mailbox_apollo_channel_num_e */
} adi_apollo_mailbox_cmd_get_cal_status_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_SYS_STATUS Cmd structure.
 * \details Get system status information. See also \ref adi_apollo_mailbox_resp_get_sys_status
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_get_sys_status
{
    uint8_t sys_status_type;       /*!< system status type to be retrieved - see \ref adi_apollo_mailbox_sys_status_type_e */
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint32_t channel_num;          /*!< Channel number (0 for channel 1, 1 for channel 2, etc.) - see \ref adi_apollo_mailbox_apollo_channel_num_e */
} adi_apollo_mailbox_cmd_get_sys_status_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_DEVICE_TEMPERATURE Cmd structure.
 * \details Get device temperature information. See also \ref adi_apollo_mailbox_resp_get_device_temperature
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_get_device_temperature
{
    uint16_t avg_mask;    /*!< Bitmask values indicating which temperature sensor readings should be averaged - see \ref adi_apollo_mailbox_temp_sensor_mask_e */
} adi_apollo_mailbox_cmd_get_device_temperature_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ENABLED_TEMP_SENSORS Cmd structure.
 * \details Set enabled temp sensors. See also \ref adi_apollo_mailbox_resp_set_enabled_temp_sensors
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_enabled_temp_sensors
{
    uint16_t temp_sensor_mask;    /*!< Bitmask indicating enabled temperature sensor(s) - see \ref adi_apollo_mailbox_temp_sensor_mask_e */
} adi_apollo_mailbox_cmd_set_enabled_temp_sensors_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_UNLOCK_CONFIG Cmd structure.
 * \details Unlock the configuration for changing. See also \ref adi_apollo_mailbox_resp_unlock_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_unlock_config
{
    uint32_t config_key;    /*!< configuration key */
} adi_apollo_mailbox_cmd_unlock_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CONFIG Cmd structure.
 * \details Set system or calibration configuration. See also \ref adi_apollo_mailbox_resp_set_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_config
{
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint16_t offset;               /*!< Offset into the configuration structure */
    uint8_t data_buffer[1014];     /*!< Data buffer. Length used indicated by length field */
    uint32_t length;               /*!< used length of the buffer */
} adi_apollo_mailbox_cmd_set_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_CONFIG Cmd structure.
 * \details Get system or calibration configuration. See also \ref adi_apollo_mailbox_resp_get_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_get_config
{
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint16_t offset;               /*!< Offset into the configuration structure */
    uint16_t length;               /*!< Length of the configuration in bytes */
} adi_apollo_mailbox_cmd_get_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CTRL Cmd structure.
 * \details Set system or calibration ctrl. See also \ref adi_apollo_mailbox_resp_set_ctrl
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_ctrl
{
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint32_t ctrl_cmd;             /*!< Command to be executed  - see \ref adi_apollo_mailbox_ctrl_cmd_e */
    uint32_t channel_num;          /*!< Channel number (0 for channel 1, 1 for channel 2, etc.) - see \ref adi_apollo_mailbox_apollo_channel_num_e */
    uint8_t data_buffer[1008];     /*!< Data buffer. Length used indicated by length field */
    uint32_t length;               /*!< used length of the buffer */
} adi_apollo_mailbox_cmd_set_ctrl_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_ENTER_DEBUG_MODE Cmd structure.
 * \details Enter debug mode. See also \ref adi_apollo_mailbox_resp_enter_debug_mode
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_enter_debug_mode
{
    uint32_t debug_mode_key;    /*!< debug mode key */
} adi_apollo_mailbox_cmd_enter_debug_mode_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_DEBUG Cmd structure.
 * \details Generic debug command. See also \ref adi_apollo_mailbox_resp_debug
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_debug
{
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint32_t debug_cmd;            /*!< Command to be executed  */
    uint32_t channel_num;          /*!< Channel number (0 for channel 1, 1 for channel 2, etc.) - see \ref adi_apollo_mailbox_apollo_channel_num_e */
    uint8_t data_buffer[1008];     /*!< Data buffer. Length used indicated by length field */
    uint32_t length;               /*!< used length of the buffer */
} adi_apollo_mailbox_cmd_debug_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_LOG_FILTERS Cmd structure.
 * \details Set CPU log filters. See also \ref adi_apollo_mailbox_resp_set_log_filters
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_log_filters
{
    uint8_t log_event_filter;                                  /*!< CPU log events - see \ref adi_apollo_mailbox_hal_cli_log_level_e */
    uint8_t cpu_id_filter;                                     /*!< CPU log CPU ID - see \ref adi_apollo_mailbox_hal_cli_cpu_id_e */
    adi_apollo_mailbox_object_id_filter_t object_id_filter;    /*!< log object ID filter settings */
} adi_apollo_mailbox_cmd_set_log_filters_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RESUME_BKPT Cmd structure.
 * \details Resume task(s) suspended due to breakpoint. See also \ref adi_apollo_mailbox_resp_resume_bkpt
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_resume_bkpt
{
    uint32_t sys_cal_object_id;    /*!< Object ID of calibration or system component - see \ref adi_apollo_mailbox_sys_cal_object_id_e */
    uint32_t channel_num_mask;     /*!< Channel number mask - see \ref adi_apollo_mailbox_apollo_channel_num_msk_e */
    uint8_t resume_all;            /*!< resume all */
} adi_apollo_mailbox_cmd_resume_bkpt_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_SERDES_EYE_SWEEP Cmd structure.
 * \details Run SERDES eye sweep. See also \ref adi_apollo_mailbox_resp_run_serdes_eye_sweep
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_run_serdes_eye_sweep
{
    uint8_t lane;                       /*!< Serializer lane number - see \ref adi_apollo_mailbox_serdes_lane_num_e */
    uint8_t prbs_pattern;               /*!< PRBS pattern */
    uint8_t force_using_outer;          /*!< Flag indicating 'outer' should be used for phase detection 0 (default) - do not use outer for phase detection, 1 - use outer for phase detection */
    uint32_t prbs_check_duration_ms;    /*!< Duration of PRBS check in [ms] */
} adi_apollo_mailbox_cmd_run_serdes_eye_sweep_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_SERDES_VERT_EYE_SWEEP Cmd structure.
 * \details Run SERDES vertical eye sweep. See also \ref adi_apollo_mailbox_resp_run_serdes_vert_eye_sweep
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_run_serdes_vert_eye_sweep
{
    uint8_t lane;    /*!< Serializer lane number - see \ref adi_apollo_mailbox_serdes_lane_num_e */
} adi_apollo_mailbox_cmd_run_serdes_vert_eye_sweep_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_GPIO Cmd structure.
 * \details Set GPIO pin configuration. See also \ref adi_apollo_mailbox_resp_set_gpio
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_gpio
{
    uint8_t signal;      /*!< ARM controlled GPIO signal enumeration - see \ref adi_apollo_mailbox_gpio_signal_e */
    uint8_t pin;         /*!< GPIO pin - see \ref adi_apollo_mailbox_gpio_pin_selection_e */
    uint8_t polarity;    /*!< ARM controlled GPIO pin polarity enumeration - see \ref adi_apollo_mailbox_gpio_polarity_e */
    uint8_t enable;      /*!< enable 0 - disable, 1 - enable - see \ref adi_apollo_mailbox_gpio_pin_ctrl_e */
} adi_apollo_mailbox_cmd_set_gpio_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_GPIO Cmd structure.
 * \details Get GPIO pin configuration. See also \ref adi_apollo_mailbox_resp_get_gpio
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_get_gpio
{
    uint8_t signal;    /*!< ARM controlled GPIO signal enumeration - see \ref adi_apollo_mailbox_gpio_signal_e */
} adi_apollo_mailbox_cmd_get_gpio_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SYSCLK_CONDITIONING Cmd structure.
 * \details sysclk conditioning. See also \ref adi_apollo_mailbox_resp_sysclk_conditioning
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_sysclk_conditioning
{
    uint8_t clk_path_segment;    /*!< clock path segment enumeration - see \ref adi_apollo_mailbox_clk_path_segment_e */
} adi_apollo_mailbox_cmd_sysclk_conditioning_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MASTER_BIAS_SET_DAC_BIAS_MODE Cmd structure.
 * \details Set DAC Bias. See also \ref adi_apollo_mailbox_resp_master_bias_set_dac_bias_mode
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_master_bias_set_dac_bias_mode
{
    uint8_t bias_mode;    /*!< DAC Bias enumeration */
} adi_apollo_mailbox_cmd_master_bias_set_dac_bias_mode_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_PGM_PLL Cmd structure.
 * \details program pll. See also \ref adi_apollo_mailbox_resp_pgm_pll
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_pgm_pll
{
    uint8_t pll;                     /*!< PLL Type Enumeration - see \ref adi_apollo_mailbox_pll_sel_name_e */
    uint32_t loop_bandwidth_hz;      /*!< PLL Loop bandwidth. (valid range: 1kHz - 10 MHz) */
    uint8_t phase_margin_degrees;    /*!< PLL Phase Margin in degrees. (valid range 0 - 80) */
    uint8_t div_range_mode;          /*!< when high, enables vco divby1 from root divider */
    uint8_t div2_mode;               /*!< when high, enables vco divby2 from root divider - div_range_mode must be zero */
    uint8_t power;                   /*!< PLL Power setting */
    uint8_t ref_clk_div;             /*!< PLL ref clock divider. (valid range: 0 - 31) */
    uint8_t i_bleed_en;              /*!< PLL bleed ramp enable */
    uint8_t serdes_pll_odiv;         /*!< Divider value (Yoda reg. name: register serdes_output_divider_ctl) */
    uint32_t feedback_int;           /*!< Integer portion of feedback factor */
    uint32_t feedback_frac;          /*!< Fractional portion of feedback factor */
} adi_apollo_mailbox_cmd_pgm_pll_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_REQUEST_CHALLENGE Cmd structure.
 * \details Request challenge. See also \ref adi_apollo_mailbox_resp_request_challenge
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_request_challenge
{
    uint8_t challenge_type;    /*!< Challenge_type to be requested  - see \ref adi_apollo_mailbox_challenge_type_e */
} adi_apollo_mailbox_cmd_request_challenge_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CHALLENGE Cmd structure.
 * \details Set challenge. See also \ref adi_apollo_mailbox_resp_set_challenge
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_challenge
{
    uint32_t challenge_type;      /*!< Challenge_type to be set  - see \ref adi_apollo_mailbox_challenge_type_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_cmd_set_challenge_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MCS_BSYNC_SET_CONFIG Cmd structure.
 * \details Set configuration by user. See also \ref adi_apollo_mailbox_resp_mcs_bsync_set_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_mcs_bsync_set_config
{
    uint8_t func_mode;     /*!< Function mode for controlling BSYNC operations - see \ref adi_apollo_mailbox_mcs_bsync_mode_e */
    uint32_t bsync_div;    /*!< BSYNC division ratio relative to Apollo device clock */
} adi_apollo_mailbox_cmd_mcs_bsync_set_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ADC_SLICE_MODE_FAST_SWITCH_ACTION Cmd structure.
 * \details Set the action of ADC slice mode fast switch. See also \ref adi_apollo_mailbox_resp_set_adc_slice_mode_fast_switch_action
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_cmd_set_adc_slice_mode_fast_switch_action
{
    uint32_t adc_rx_channel_mask;                 /*!< which Rx channels to set the action of the ADC Rx fast mode switch to - see \ref adi_apollo_mailbox_apollo_rx_channel_number_msk_e */
    uint8_t adc_slice_mode_fast_switch_action;    /*!< ADC slice mode fast switch action - see \ref adi_apollo_mailbox_adc_slice_mode_fast_switch_action_e */
} adi_apollo_mailbox_cmd_set_adc_slice_mode_fast_switch_action_t;
)

/*****************************************************************************
 * Response structures
 *****************************************************************************/

/**
 * \brief \ref ADI_APOLLO_MAILBOX_PING Resp structure.
 * \details Ping the CPU. See also \ref adi_apollo_mailbox_cmd_ping
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_ping
{
    uint32_t status;       /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint32_t echo_data;    /*!< Data to be echoed back by CPU */
} adi_apollo_mailbox_resp_ping_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_INIT Resp structure.
 * \details Run initial calibrations. See also \ref adi_apollo_mailbox_cmd_run_init
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_init
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_run_init_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_INIT_GET_COMPLETION Resp structure.
 * \details Get the completion status of initial calibrations
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_init_get_completion
{
    uint32_t status;        /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t in_progress;    /*!< Init cal progress flag. Will be set to 1 if an initial calibration run is currently in progress. Set to 0 otherwise. */
    uint8_t success;        /*!< Init cal success/failure status. Set to 1 if all cals completed successfully. Set to 0 otherwise. Only valid when inProgress equals 0. Issue APOLLO_CPU_CMD_ID_RUN_INIT_GET_DETAILED_STATUS for detailed error info. */
} adi_apollo_mailbox_resp_run_init_get_completion_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_INIT_GET_DETAILED_STATUS Resp structure.
 * \details Get detailed status information on initial calibrations
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_init_get_detailed_status
{
    uint32_t status;                    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint32_t init_err_codes[8];         /*!< Set of initial calibration error codes for each channel */
    uint32_t init_err_cals[8];          /*!< Bitmask indicating calibrations reporting an error for each channel - see \ref adi_apollo_mailbox_apollo_init_calibrations_msk_e for each element */
    uint32_t cals_duration_msec;        /*!< Duration in msec of the last initial calibration run */
    uint32_t cals_since_power_up[8];    /*!< Bitmask indicating calibrations run since power up for each channel - see \ref adi_apollo_mailbox_apollo_init_calibrations_msk_e for each element */
    uint32_t cals_last_run[8];          /*!< Bitmask indicating calibrations run in during the previous runInitCals() call for each channel - see \ref adi_apollo_mailbox_apollo_init_calibrations_msk_e for each element */
} adi_apollo_mailbox_resp_run_init_get_detailed_status_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_INIT_ABORT Resp structure.
 * \details Abort any in progress initial calibrations
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_init_abort
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_run_init_abort_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ENABLED_TRACKING_CALS Resp structure.
 * \details Set the set of enabled tracking cals. See also \ref adi_apollo_mailbox_cmd_set_enabled_tracking_cals
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_enabled_tracking_cals
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_enabled_tracking_cals_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_ENABLED_TRACKING_CALS Resp structure.
 * \details Get the set of enabled tracking cals
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_enabled_tracking_cals
{
    uint32_t status;                                                             /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    adi_apollo_mailbox_tracking_cal_enable_masks_t tracking_cal_enable_masks;    /*!< data structure to hold tracking calibration enable masks */
} adi_apollo_mailbox_resp_get_enabled_tracking_cals_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_TRACKING_CAL_STATE Resp structure.
 * \details Get detailed state information for all tracking cals
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_tracking_cal_state
{
    uint32_t status;                                               /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    adi_apollo_mailbox_tracking_cal_state_t tracking_cal_state;    /*!< hold tracking calibration state information */
} adi_apollo_mailbox_resp_get_tracking_cal_state_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_CAL_STATUS Resp structure.
 * \details Get calibration status information. See also \ref adi_apollo_mailbox_cmd_get_cal_status
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_cal_status
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_resp_get_cal_status_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_SYS_STATUS Resp structure.
 * \details Get system status information. See also \ref adi_apollo_mailbox_cmd_get_sys_status
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_sys_status
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_resp_get_sys_status_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_DEVICE_TEMPERATURE Resp structure.
 * \details Get device temperature information. See also \ref adi_apollo_mailbox_cmd_get_device_temperature
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_device_temperature
{
    uint32_t status;                             /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    adi_apollo_mailbox_temp_data_t temp_data;    /*!< Temperature data returned by CPU */
} adi_apollo_mailbox_resp_get_device_temperature_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_ENABLED_TEMP_SENSORS Resp structure.
 * \details Get enabled temp sensors
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_enabled_temp_sensors
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint16_t temp_sensor_mask;    /*!< Bitmask indicating enabled temperature sensor(s) - see \ref adi_apollo_mailbox_temp_sensor_mask_e */
} adi_apollo_mailbox_resp_get_enabled_temp_sensors_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ENABLED_TEMP_SENSORS Resp structure.
 * \details Set enabled temp sensors. See also \ref adi_apollo_mailbox_cmd_set_enabled_temp_sensors
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_enabled_temp_sensors
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint16_t temp_sensor_mask;    /*!< Bitmask indicating enabled temperature sensor(s) - see \ref adi_apollo_mailbox_temp_sensor_mask_e */
} adi_apollo_mailbox_resp_set_enabled_temp_sensors_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_UNLOCK_CONFIG Resp structure.
 * \details Unlock the configuration for changing. See also \ref adi_apollo_mailbox_cmd_unlock_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_unlock_config
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_unlock_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CONFIG Resp structure.
 * \details Set system or calibration configuration. See also \ref adi_apollo_mailbox_cmd_set_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_config
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_CONFIG Resp structure.
 * \details Get system or calibration configuration. See also \ref adi_apollo_mailbox_cmd_get_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_config
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_resp_get_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CTRL Resp structure.
 * \details Set system or calibration ctrl. See also \ref adi_apollo_mailbox_cmd_set_ctrl
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_ctrl
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_resp_set_ctrl_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_ENTER_DEBUG_MODE Resp structure.
 * \details Enter debug mode. See also \ref adi_apollo_mailbox_cmd_enter_debug_mode
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_enter_debug_mode
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_enter_debug_mode_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_DEBUG Resp structure.
 * \details Generic debug command. See also \ref adi_apollo_mailbox_cmd_debug
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_debug
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_debug_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_LOG_FILTERS Resp structure.
 * \details Set CPU log filters. See also \ref adi_apollo_mailbox_cmd_set_log_filters
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_log_filters
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_log_filters_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RESUME_BKPT Resp structure.
 * \details Resume task(s) suspended due to breakpoint. See also \ref adi_apollo_mailbox_cmd_resume_bkpt
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_resume_bkpt
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_resume_bkpt_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_SERDES_EYE_SWEEP Resp structure.
 * \details Run SERDES eye sweep. See also \ref adi_apollo_mailbox_cmd_run_serdes_eye_sweep
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_serdes_eye_sweep
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_run_serdes_eye_sweep_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_RUN_SERDES_VERT_EYE_SWEEP Resp structure.
 * \details Run SERDES vertical eye sweep. See also \ref adi_apollo_mailbox_cmd_run_serdes_vert_eye_sweep
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_run_serdes_vert_eye_sweep
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_run_serdes_vert_eye_sweep_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_GPIO Resp structure.
 * \details Set GPIO pin configuration. See also \ref adi_apollo_mailbox_cmd_set_gpio
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_gpio
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_gpio_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_GPIO Resp structure.
 * \details Get GPIO pin configuration. See also \ref adi_apollo_mailbox_cmd_get_gpio
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_gpio
{
    uint32_t status;     /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t pin;         /*!< GPIO pin - see \ref adi_apollo_mailbox_gpio_pin_selection_e */
    uint8_t polarity;    /*!< ARM controlled GPIO pin polarity enumeration - see \ref adi_apollo_mailbox_gpio_polarity_e */
} adi_apollo_mailbox_resp_get_gpio_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MBIAS_PRE_CLOCK_INIT Resp structure.
 * \details MBIAS pre clock init
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_mbias_pre_clock_init
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_mbias_pre_clock_init_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MBIAS_POST_CLOCK_INIT Resp structure.
 * \details MBIAS post clock init
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_mbias_post_clock_init
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_mbias_post_clock_init_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SYSCLK_CONFIGURATION Resp structure.
 * \details sysclk configuration
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_sysclk_configuration
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_sysclk_configuration_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SYSCLK_CONDITIONING Resp structure.
 * \details sysclk conditioning. See also \ref adi_apollo_mailbox_cmd_sysclk_conditioning
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_sysclk_conditioning
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_sysclk_conditioning_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SYSCLK_SWITCH_TO_HSDIG Resp structure.
 * \details sysclk switch from ring oscillator
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_sysclk_switch_to_hsdig
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_sysclk_switch_to_hsdig_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MASTER_BIAS_SET_DAC_BIAS_MODE Resp structure.
 * \details Set DAC Bias. See also \ref adi_apollo_mailbox_cmd_master_bias_set_dac_bias_mode
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_master_bias_set_dac_bias_mode
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_master_bias_set_dac_bias_mode_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SYSCLK_SWITCH_TO_RINGOSC Resp structure.
 * \details sysclk switch to ring oscillator
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_sysclk_switch_to_ringosc
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_sysclk_switch_to_ringosc_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_PGM_PLL Resp structure.
 * \details program pll. See also \ref adi_apollo_mailbox_cmd_pgm_pll
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_pgm_pll
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_pgm_pll_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_UPDATE_CAL_DATA_CRC Resp structure.
 * \details Update CRC for all calibration data
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_update_cal_data_crc
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_update_cal_data_crc_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_FW_VERSION Resp structure.
 * \details Gets the firmware version information
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_fw_version
{
    uint32_t status;        /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint16_t year;          /*!< The year component of the version */
    uint8_t month;          /*!< The month component of the version */
    uint8_t day;            /*!< The day component of the version */
    uint8_t minor;          /*!< The minor component of the version */
    uint16_t build;         /*!< The bulid number component of the version */
    uint8_t qualifier;      /*!< A qualifier number (may not be used) */
    uint16_t build_year;    /*!< The year the firmware was built */
    uint8_t build_month;    /*!< The month the firmware was built */
    uint8_t build_day;      /*!< The day the firmware was built */
    uint8_t build_hour;     /*!< The hour the firware was built (UTC) */
    uint8_t build_min;      /*!< The minute the firware was built (UTC) */
} adi_apollo_mailbox_resp_get_fw_version_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_REQUEST_CHALLENGE Resp structure.
 * \details Request challenge. See also \ref adi_apollo_mailbox_cmd_request_challenge
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_request_challenge
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t data_buffer[1016];    /*!< Data buffer. Length used indicated by length field */
    uint32_t length;              /*!< used length of the buffer */
} adi_apollo_mailbox_resp_request_challenge_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_CHALLENGE Resp structure.
 * \details Set challenge. See also \ref adi_apollo_mailbox_cmd_set_challenge
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_challenge
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_challenge_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_POWER_UP_JTX Resp structure.
 * \details Power up JTx
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_power_up_jtx
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_power_up_jtx_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MCS_BSYNC_SET_CONFIG Resp structure.
 * \details Set configuration by user. See also \ref adi_apollo_mailbox_cmd_mcs_bsync_set_config
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_mcs_bsync_set_config
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_mcs_bsync_set_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MCS_BSYNC_GET_CONFIG Resp structure.
 * \details Get configuration by user
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_mcs_bsync_get_config
{
    uint32_t status;       /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t func_mode;     /*!< Function mode for controlling BSYNC operations - see \ref adi_apollo_mailbox_mcs_bsync_mode_e */
    uint32_t bsync_div;    /*!< BSYNC division ratio relative to Apollo device clock */
    uint8_t done_flag;     /*!<  */
    int64_t delta_t0;      /*!< Time difference after alignment in femtoseconds */
    int64_t delta_t1;      /*!< Measure delay needed to be compensated by delay line in femtoseconds */
} adi_apollo_mailbox_resp_mcs_bsync_get_config_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_MCS_BSYNC_GO Resp structure.
 * \details Start the BSYNC synchornization process
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_mcs_bsync_go
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_mcs_bsync_go_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_GET_ADC_SLICE_MODES Resp structure.
 * \details Gets the ADC slice modes
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_get_adc_slice_modes
{
    uint32_t status;              /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
    uint8_t adc_slice_mode[8];    /*!< ADC slice modes ([0]:A0,[1]:A1,[2]:A2,[3]:A3,[4]:B0,[5]:B1,[6]:B2,[7]:B3). 0: Random, 1: Sequential, 255: Channel disabled */
} adi_apollo_mailbox_resp_get_adc_slice_modes_t;
)

/**
 * \brief \ref ADI_APOLLO_MAILBOX_SET_ADC_SLICE_MODE_FAST_SWITCH_ACTION Resp structure.
 * \details Set the action of ADC slice mode fast switch. See also \ref adi_apollo_mailbox_cmd_set_adc_slice_mode_fast_switch_action
 */
ADI_APOLLO_PACKED(
typedef struct adi_apollo_mailbox_resp_set_adc_slice_mode_fast_switch_action
{
    uint32_t status;    /*!< cpu error response code - see \ref adi_apollo_mailbox_cpu_error_code_e */
} adi_apollo_mailbox_resp_set_adc_slice_mode_fast_switch_action_t;
)

#endif /* __ADI_APOLLO_MAILBOX_TYPES_H__ */
/*! @} */