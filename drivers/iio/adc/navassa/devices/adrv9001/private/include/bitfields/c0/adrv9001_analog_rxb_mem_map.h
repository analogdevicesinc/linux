/**
 * \file
 * \brief BitField accessors for analog_rxb_mem_map
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__
 #define __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__

#include "adrv9001_bf_hal.h"



static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x18 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x18 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x22 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x22 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x27 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x27 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x31 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x31 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x36 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x36 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3b + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3b + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x40 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x40 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x45 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x45 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x17 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x17 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x21 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x21 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x26 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x26 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2b + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2b + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x30 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x30 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x35 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x35 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3a + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3a + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3f + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3f + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x44 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x44 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1a + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1a + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1f + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1f + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x24 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x29 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x29 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2e + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2e + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x33 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x33 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x38 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x38 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x42 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x42 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x47 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x47 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x19 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x19 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1e + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1e + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x23 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x23 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x28 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x28 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x32 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x32 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x37 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x37 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x41 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x41 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x46 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x46 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x0 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x0 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x4 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x4 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x6 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x6 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x8 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x8 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xa + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xa + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xc + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xc + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xe + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xe + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x10 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x10 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x12 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x12 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selcc9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

static inline int32_t adrv9001_AnalogRxbMemMap_Selrz9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__