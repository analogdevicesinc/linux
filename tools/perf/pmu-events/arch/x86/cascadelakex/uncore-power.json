[
    {
        "BriefDescription": "pclk Cycles",
        "Counter": "0,1,2,3",
        "EventName": "UNC_P_CLOCKTICKS",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "The PCU runs off a fixed 1 GHz clock.  This event counts the number of pclk cycles measured while the counter was enabled.  The pclk, like the Memory Controller's dclk, counts at a constant rate making it a good measure of actual wall time.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "UNC_P_CORE_TRANSITION_CYCLES",
        "Counter": "0,1,2,3",
        "EventCode": "0x60",
        "EventName": "UNC_P_CORE_TRANSITION_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "UNC_P_DEMOTIONS",
        "Counter": "0,1,2,3",
        "EventCode": "0x30",
        "EventName": "UNC_P_DEMOTIONS",
        "Experimental": "1",
        "PerPkg": "1",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Phase Shed 0 Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x75",
        "EventName": "UNC_P_FIVR_PS_PS0_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Cycles spent in phase-shedding power state 0",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Phase Shed 1 Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x76",
        "EventName": "UNC_P_FIVR_PS_PS1_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Cycles spent in phase-shedding power state 1",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Phase Shed 2 Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x77",
        "EventName": "UNC_P_FIVR_PS_PS2_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Cycles spent in phase-shedding power state 2",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Phase Shed 3 Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x78",
        "EventName": "UNC_P_FIVR_PS_PS3_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Cycles spent in phase-shedding power state 3",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Thermal Strongest Upper Limit Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x4",
        "EventName": "UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when thermal conditions are the upper limit on frequency.  This is related to the THERMAL_THROTTLE CYCLES_ABOVE_TEMP event, which always counts cycles when we are above the thermal temperature.  This event (STRONGEST_UPPER_LIMIT) is sampled at the output of the algorithm that determines the actual frequency, while THERMAL_THROTTLE looks at the input.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Power Strongest Upper Limit Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x5",
        "EventName": "UNC_P_FREQ_MAX_POWER_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when power is the upper limit on frequency.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "IO P Limit Strongest Lower Limit Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x73",
        "EventName": "UNC_P_FREQ_MIN_IO_P_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when IO P Limit is preventing us from dropping the frequency lower.  This algorithm monitors the needs to the IO subsystem on both local and remote sockets and will maintain a frequency high enough to maintain good IO BW.  This is necessary for when all the IA cores on a socket are idle but a user still would like to maintain high IO Bandwidth.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Cycles spent changing Frequency",
        "Counter": "0,1,2,3",
        "EventCode": "0x74",
        "EventName": "UNC_P_FREQ_TRANS_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the system is changing frequency.  This can not be filtered by thread ID.  One can also use it with the occupancy counter that monitors number of threads in C0 to estimate the performance impact that frequency transitions had on the system.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "UNC_P_MCP_PROCHOT_CYCLES",
        "Counter": "0,1,2,3",
        "EventCode": "0x6",
        "EventName": "UNC_P_MCP_PROCHOT_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Memory Phase Shedding Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x2F",
        "EventName": "UNC_P_MEMORY_PHASE_SHEDDING_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the PCU has triggered memory phase shedding.  This is a mode that can be run in the iMC physicals that saves power at the expense of additional latency.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Package C State Residency - C0",
        "Counter": "0,1,2,3",
        "EventCode": "0x2A",
        "EventName": "UNC_P_PKG_RESIDENCY_C0_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the package was in C0.  This event can be used in conjunction with edge detect to count C0 entrances (or exits using invert).  Residency events do not include transition times.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Package C State Residency - C2E",
        "Counter": "0,1,2,3",
        "EventCode": "0x2B",
        "EventName": "UNC_P_PKG_RESIDENCY_C2E_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the package was in C2E.  This event can be used in conjunction with edge detect to count C2E entrances (or exits using invert).  Residency events do not include transition times.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Package C State Residency - C3",
        "Counter": "0,1,2,3",
        "EventCode": "0x2C",
        "EventName": "UNC_P_PKG_RESIDENCY_C3_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the package was in C3.  This event can be used in conjunction with edge detect to count C3 entrances (or exits using invert).  Residency events do not include transition times.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Package C State Residency - C6",
        "Counter": "0,1,2,3",
        "EventCode": "0x2D",
        "EventName": "UNC_P_PKG_RESIDENCY_C6_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the package was in C6.  This event can be used in conjunction with edge detect to count C6 entrances (or exits using invert).  Residency events do not include transition times.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "UNC_P_PMAX_THROTTLED_CYCLES",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_P_PMAX_THROTTLED_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Number of cores in C-State; C0 and C1",
        "Counter": "0,1,2,3",
        "EventCode": "0x80",
        "EventName": "UNC_P_POWER_STATE_OCCUPANCY.CORES_C0",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.",
        "UMask": "0x40",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Number of cores in C-State; C3",
        "Counter": "0,1,2,3",
        "EventCode": "0x80",
        "EventName": "UNC_P_POWER_STATE_OCCUPANCY.CORES_C3",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.",
        "UMask": "0x80",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Number of cores in C-State; C6 and C7",
        "Counter": "0,1,2,3",
        "EventCode": "0x80",
        "EventName": "UNC_P_POWER_STATE_OCCUPANCY.CORES_C6",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.",
        "UMask": "0xc0",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "External Prochot",
        "Counter": "0,1,2,3",
        "EventCode": "0xA",
        "EventName": "UNC_P_PROCHOT_EXTERNAL_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Internal Prochot",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_P_PROCHOT_INTERNAL_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that we are in Internal PROCHOT mode.  This mode is triggered when a sensor on the die determines that we are too hot and must throttle to avoid damaging the chip.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "Total Core C State Transition Cycles",
        "Counter": "0,1,2,3",
        "EventCode": "0x72",
        "EventName": "UNC_P_TOTAL_TRANSITION_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles spent performing core C state transitions across all cores.",
        "Unit": "PCU"
    },
    {
        "BriefDescription": "VR Hot",
        "Counter": "0,1,2,3",
        "EventCode": "0x42",
        "EventName": "UNC_P_VR_HOT_CYCLES",
        "Experimental": "1",
        "PerPkg": "1",
        "Unit": "PCU"
    }
]
